# Japanese translations for PACKAGE package
# PACKAGE パッケージに対する英訳
# Copyright (C) 2024 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: factory_bot\n"
"POT-Creation-Date: 2024-11-24 09:56+0900\n"
"PO-Revision-Date: 2024-11-24 10:48+0900\n"
"Last-Translator: gemmaro <gemmaro.dev@gmail.com>\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title #
#: ../docs/src/intro.md:1
#, no-wrap
msgid "Intro"
msgstr "序"

#. type: Plain text
#: ../docs/src/intro.md:7 ../README.md:4
msgid ""
"factory_bot is a fixtures replacement with a straightforward definition "
"syntax, support for multiple build strategies (saved instances, unsaved "
"instances, attribute hashes, and stubbed objects), and support for multiple "
"factories for the same class (user, admin_user, and so on), including "
"factory inheritance."
msgstr ""
"factory_botはフィクスチャの代わりになるものです。\n"
"直感的な定義構文であり、複数の構築戦略（保存されたインスタンス、保存されない"
"インスタンス、属性ハッシュ、スタブ化オブジェクト）、ファクトリ継承を含む同じ"
"クラスに対する複数のファクトリ（user、admin_user、など）に対応しています。"

#. type: Plain text
#: ../docs/src/intro.md:9
msgid "Its documentation is split as such:"
msgstr "ドキュメントは以下に分かれています。"

#. type: Bullet: '- '
#: ../docs/src/intro.md:14
msgid ""
"the [guide](setup/summary.html) is a great place to start for first-time "
"users."
msgstr "初めて使う方は、[手引き](setup/summary.html)から始めると良いでしょう。"

#. type: Bullet: '- '
#: ../docs/src/intro.md:14
msgid ""
"the [cookbook](cookbook/has_many-associations.html) is the go-to place for "
"creative solutions to common situations."
msgstr ""
"[レシピ](cookbook/has_many-associations.html)には、よくある状況に対する創造的"
"な解決策があります。"

#. type: Bullet: '- '
#: ../docs/src/intro.md:14
msgid ""
"the [wiki](https://github.com/thoughtbot/factory_bot/wiki) details "
"considerations for integrating with other software."
msgstr ""
"[ウィキ](https://github.com/thoughtbot/factory_bot/wiki)には他のソフトウェア"
"と統合するときの検討事項が詳しく書かれています。"

#. type: Bullet: '- '
#: ../docs/src/intro.md:14
msgid ""
"the [reference](ref/build-strategies.html) is terse facts for those who use "
"this project often."
msgstr ""
"[便覧](ref/build-strategies.html)には、本プロジェクトのソフトウェアを頻繁に使"
"う人向けの情報があります。"

#. type: Title -
#: ../docs/src/intro.md:15 ../README.md:76
#, no-wrap
msgid "License"
msgstr "使用許諾"

#. type: Plain text
#: ../docs/src/intro.md:20 ../README.md:81
msgid ""
"factory_bot is Copyright © 2008 Joe Ferris and thoughtbot. It is free "
"software, and may be redistributed under the terms specified in the "
"[LICENSE] file."
msgstr ""
"factory_bot is Copyright © 2008 Joe Ferris and thoughtbot. It is free "
"software, and may be redistributed under the terms specified in the "
"[LICENSE] file."

#. type: Link reference
#: ../docs/src/intro.md:21 ../README.md:82
#, no-wrap
msgid "[LICENSE]: https://github.com/thoughtbot/factory_bot/blob/main/LICENSE"
msgstr "[LICENSE]: https://github.com/thoughtbot/factory_bot/blob/main/LICENSE"

#. type: Title ##
#: ../docs/src/intro.md:23 ../README.md:85
#, no-wrap
msgid "About thoughtbot"
msgstr "thoughtbotについて"

#. type: Plain text
#: ../docs/src/intro.md:27
msgid ""
"factory_bot is maintained and funded by thoughtbot, inc.  The names and "
"logos for thoughtbot are trademarks of thoughtbot, inc."
msgstr ""
"factory_botはthoughtbot, inc.により保守され、資金提供されています。\n"
"thoughtbotの名前とロゴはthoughtbot, inc.の商標です。"

#. type: Plain text
#: ../docs/src/intro.md:31
msgid ""
"We love open source software! See [our other projects][community] or [hire "
"us][hire] to design, develop, and grow your product."
msgstr ""
"私達はオープンソースソフトウェアが大好きです！\n"
"[私達の他のプロジェクト][community]を参照してください。\n"
"製品を設計、開発、成長させるための[求人を募集しています][hire]。"

#. type: Link reference
#: ../docs/src/intro.md:32 ../README.md:96
#, no-wrap
msgid "[community]: https://thoughtbot.com/community?utm_source=github"
msgstr "[community]: https://thoughtbot.com/community?utm_source=github"

#. type: Link reference
#: ../docs/src/intro.md:33 ../README.md:97
#, no-wrap
msgid "[hire]: https://thoughtbot.com/hire-us?utm_source=github"
msgstr "[hire]: https://thoughtbot.com/hire-us?utm_source=github"

#. type: Title #
#: ../docs/src/ref/build-strategies.md:1
#: ../docs/src/associations/build-strategies.md:1
#: ../docs/src/using-factories/build-strategies.md:1
#, no-wrap
msgid "Build strategies"
msgstr "構築戦略"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:5
msgid ""
"Once a factory\\_bot factory is defined, it can be constructed using any of "
"the built-in build strategies, or a custom build strategy."
msgstr ""
"factory\\_botのファクトリを定義したら、組み込みの構築戦略や独自の構築戦略を"
"使って構築できます。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:9
msgid ""
"All of these strategies notify on the `factory_bot.run_factory` "
"instrumentation using [ActiveSupport::Notifications], passing a payload with "
"`:name`, `:strategy`, `:traits`, `:overrides`, and `:factory` keys."
msgstr ""
"こうした戦略は全て、[ActiveSupport::Notifications]を使って`factory_bot."
"run_factory`計装に通知し、キー`:name`、`:strategy`、`:traits`、`:overrides`、"
"`:factory`を持つペイロードを渡します。"

#. type: Link reference
#: ../docs/src/ref/build-strategies.md:10
#, no-wrap
msgid "[ActiveSupport::Notifications]: https://api.rubyonrails.org/classes/ActiveSupport/Notifications.html"
msgstr "[ActiveSupport::Notifications]: https://api.rubyonrails.org/classes/ActiveSupport/Notifications.html"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:17
msgid ""
"The non-list (`.build`, `.build_pair`, `.create`, etc.) methods take one "
"mandatory argument: the name of the factory. They can then optionally take "
"names of traits, and then a hash of attributes to override. Finally, they "
"can take a block. This block takes the produced object as an argument, and "
"returns an updated object."
msgstr ""
"リストではないメソッド（`.build`や`.build_pair`や`.create`など）は、必須の実"
"引数であるファクトリ名を取ります。\n"
"また、省略できるトレイト名や、上塗りする属性のハッシュもあります。\n"
"最後にブロックを取れます。\n"
"このブロックは、生成されたオブジェクトを実引数とし、更新されたオブジェクトを"
"返します。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:23
msgid ""
"The list methods (`.build_list`, `.create_list`, etc.) have two required "
"arguments: the name of the factory, and the number of instances to build. "
"They then can optionally take traits and overrides. Finally, they can take a "
"block.  This block takes the produced object and the zero-based index as "
"arguments, and returns an updated object."
msgstr ""
"リストのメソッド（`.build_list`や`.create_list`など）には2つの必須の実引数を"
"持ちます。\n"
"ファクトリの名前と構築するインスタンスの数です。\n"
"また省略可能なトレイトと上塗りするものを取れます。\n"
"最後にブロックを取れます。\n"
"このブロックは生成されたオブジェクトとゼロ始まりの添字を実引数として取り、更"
"新されたオブジェクトを返します。"

#. type: Title ##
#: ../docs/src/ref/build-strategies.md:24
#, no-wrap
msgid "`build`"
msgstr "`build`"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:30
msgid ""
"The `FactoryBot.build` method constructs an instance of the class according "
"to `initialize_with`, which defaults to calling the `.new` class method.  `."
"build_list` constructs multiple instances, and `.build_pair` is a shorthand "
"to construct two instances."
msgstr ""
"`FactoryBot.build`メソッドは`initialize_with`にしたがってクラスのインスタンス"
"を構築します。\n"
"既定では`.new`クラスメソッドを呼びます。\n"
"`.build_list`は複数のインスタンスを構築し、`.build_pair`は2つのインスタンスを"
"構築する早道です。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:32
msgid "After it calls `initialize_with`, it invokes the `after_build` hook."
msgstr "`initialize_with`を呼んだ後、`after_build`フックを呼びます。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:34
msgid "Associations are constructed using the `build` build strategy."
msgstr "関連は`build`構築戦略を使って構築されます。"

#. type: Title ##
#: ../docs/src/ref/build-strategies.md:35
#, no-wrap
msgid "`create`"
msgstr "`create`"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:41
msgid ""
"The `FactoryBot.create` method constructs an instance of the class according "
"to `initialize_with`, and then persists it using `to_create`. The `."
"create_list` class method constructs multiple instances, and `.create_pair` "
"is a shorthand to construct two instances."
msgstr ""
"`FactoryBot.create`メソッドは`initialize_with`にしたがってクラスのインスタン"
"スを構築し、`to_create`を使って永続化します。\n"
"`.create_list`クラスメソッドは複数のインスタンスを構築します。\n"
"また`.create_pair`は2つのインスタンスを構築する早道です。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:43
msgid ""
"After it calls `initialize_with`, it invokes the following hooks in order:"
msgstr "`initialize_with`を呼んだ後、以下のフックを順番に呼びます。"

#. type: Bullet: '1. '
#: ../docs/src/ref/build-strategies.md:48
msgid "`after_build`"
msgstr "`after_build`"

#. type: Bullet: '1. '
#: ../docs/src/ref/build-strategies.md:48
msgid "`before_create`"
msgstr "`before_create`"

#. type: Bullet: '1. '
#: ../docs/src/ref/build-strategies.md:48
msgid "non-hook: `to_create`"
msgstr "フックではない`to_create`"

#. type: Bullet: '1. '
#: ../docs/src/ref/build-strategies.md:48
msgid "`after_create`"
msgstr "`after_create`"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:50
msgid "Associations are constructed using the `create` build strategy."
msgstr "関連は`create`構築戦略を使って構築されます。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:54
msgid ""
"The `to_create` hook controls how objects are persisted. It takes a block "
"with the object and the factory\\_bot context, and runs it for its side "
"effect. By default, it calls `#save!`."
msgstr ""
"`to_create`フックはオブジェクトの永続化方法を制御します。\n"
"オブジェクトとfactory\\_botの文脈を持つブロックを取り、副作用を見越して走りま"
"す。\n"
"既定では`#save!`を呼びます。"

#. type: Title ##
#: ../docs/src/ref/build-strategies.md:55
#, no-wrap
msgid "`attributes_for`"
msgstr "`attributes_for`"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:60
msgid ""
"The `FactoryBot.attributes_for` method constructs a Hash with the attributes "
"and their values, using `initialize_with`. The `attributes_for_pair` and "
"`attributes_for_list` methods work similarly as `build_pair` and "
"`build_list`."
msgstr ""
"`FactoryBot.attributes_for`メソッドは、属性とその値を持つHashを、"
"`initialize_with`を使って構築します。\n"
"`attributes_for_pair`メソッドと`attributes_for_list`メソッドは、`build_pair`"
"と`build_list`と似た動作です。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:62
msgid ""
"Associations are constructed using the `null` build strategy (they are not "
"built)."
msgstr "関連は`null`構築戦略（構築されません）を使って構築されます。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:64
msgid "No hooks are called."
msgstr "フックは呼ばれません。"

#. type: Title ##
#: ../docs/src/ref/build-strategies.md:65
#, no-wrap
msgid "`build_stubbed`"
msgstr "`build_stubbed`"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:70
msgid ""
"The `FactoryBot.build_stubbed` method returns a fake ActiveRecord object. "
"The `.build_stubbed_pair` and `.build_stubbed_list` methods are defined "
"similarly to `.build_pair` and `.build_list`."
msgstr ""
"`FactoryBot.build_stubbed`メソッドは、偽のActiveRecordオブジェクトを返しま"
"す。\n"
"`.build_stubbed_pair`メソッドと`.build_stubbed_list`メソッドは、`.build_pair`"
"と`.build_list`と似た定義です。"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:73
msgid ""
"It uses `initialize_with` to construct the object, but then stubs methods "
"and data as appropriate:"
msgstr ""
"`initialize_with`を使ってオブジェクトを構築します。\n"
"ただし、メソッドとデータを適切にスタブします。"

#. type: Bullet: '- '
#: ../docs/src/ref/build-strategies.md:81
msgid "`id` is set sequentially (unless overridden by attributes)"
msgstr "`id`は（属性で上塗りされない限り）連番で設定されます。"

#. type: Bullet: '- '
#: ../docs/src/ref/build-strategies.md:81
msgid ""
"`created_at` and `updated_at` are set to the current time (unless overridden "
"by attributes)"
msgstr ""
"`created_at`と`updated_at`は（属性で上塗りされない限り）現在時刻に設定されま"
"す。"

#. type: Bullet: '- '
#: ../docs/src/ref/build-strategies.md:81
msgid "all [ActiveModel::Dirty] change tracking is cleared"
msgstr "全ての[ActiveModel::Dirty]の変更の記録が消去されます。"

#. type: Bullet: '- '
#: ../docs/src/ref/build-strategies.md:81
msgid "`persisted?` is true"
msgstr "`persisted?`は真です。"

#. type: Bullet: '- '
#: ../docs/src/ref/build-strategies.md:81
msgid "`new_record?` is false"
msgstr "`new_record?`は偽です。"

#. type: Bullet: '- '
#: ../docs/src/ref/build-strategies.md:81
msgid "`destroyed?` is false"
msgstr "`destroyed?`は偽です。"

#. type: Bullet: '- '
#: ../docs/src/ref/build-strategies.md:81
msgid ""
"persistence methods raise a `RuntimeError` (`#connection`, `#delete`, "
"`#save`, `#update`, etc.)"
msgstr ""
"永続化メソッド（`#connection`や`#delete`や`#save`や`#update`など）は"
"`RuntimeError`を投げます。"

#. type: Link reference
#: ../docs/src/ref/build-strategies.md:82
#, no-wrap
msgid "[ActiveModel::Dirty]: https://api.rubyonrails.org/classes/ActiveModel/Dirty.html"
msgstr "[ActiveModel::Dirty]: https://api.rubyonrails.org/classes/ActiveModel/Dirty.html"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:85
msgid "After it sets up the object it invokes the `after_stub` hook."
msgstr "オブジェクトを設定した後`after_stub`フックを呼びます。"

#. type: Title ##
#: ../docs/src/ref/build-strategies.md:86
#, no-wrap
msgid "`null`"
msgstr "`null`"

#. type: Plain text
#: ../docs/src/ref/build-strategies.md:90
msgid ""
"The `FactoryBot.null` method returns `nil`. The `.null_pair` method gives "
"you a pair of nils, and `.null_list` gives as many nils as you desire. This "
"is used internally."
msgstr ""
"`FactoryBot.null`メソッドは`nil`を返します。\n"
"`.null_pair`メソッドはnilの対を与えます。\n"
"`.null_list`は欲しい数だけnilを与えます。\n"
"内部的に使われています。"

#. type: Title #
#: ../docs/src/SUMMARY.md:1
#, no-wrap
msgid "Summary"
msgstr "概要"

#. type: Plain text
#: ../docs/src/SUMMARY.md:4
msgid "[Intro](intro.md)"
msgstr "[序](intro.md)"

#. type: Title ##
#: ../docs/src/SUMMARY.md:5
#, no-wrap
msgid "Reference"
msgstr "便覧"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[Build strategies](ref/build-strategies.md)"
msgstr "[構築戦略](ref/build-strategies.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[FactoryBot.find_definitions](ref/find_definitions.md)"
msgstr "[FactoryBot.find_definitions](ref/find_definitions.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[FactoryBot.define](ref/define.md)"
msgstr "[FactoryBot.define](ref/define.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[factory](ref/factory.md)"
msgstr "[factory](ref/factory.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[add_attribute](ref/add_attribute.md)"
msgstr "[add_attribute](ref/add_attribute.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[association](ref/association.md)"
msgstr "[association](ref/association.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[sequence](ref/sequence.md)"
msgstr "[sequence](ref/sequence.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[trait](ref/trait.md)"
msgstr "[trait](ref/trait.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[method_missing](ref/method_missing.md)"
msgstr "[method_missing](ref/method_missing.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[traits_for_enum](ref/traits_for_enum.md)"
msgstr "[traits_for_enum](ref/traits_for_enum.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[skip_create, to_create, and initialize_with](ref/build-and-create.md)"
msgstr ""
"[skip_createとto_create、そしてinitialize_with](ref/build-and-create.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[transient](ref/transient.md)"
msgstr "[transient](ref/transient.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[Hooks](ref/hooks.md)"
msgstr "[フック](ref/hooks.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[FactoryBot.modify](ref/modify.md)"
msgstr "[FactoryBot.modify](ref/modify.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[FactoryBot.lint](ref/lint.md)"
msgstr "[FactoryBot.lint](ref/lint.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:23
msgid "[FactoryBot.register_strategy](ref/register_strategy.md)"
msgstr "[FactoryBot.register_strategy](ref/register_strategy.md)"

#. type: Title ##
#: ../docs/src/SUMMARY.md:24
#, no-wrap
msgid "Guide"
msgstr "手引き"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Setup](setup/summary.md)"
msgstr "[準備](setup/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Using Without Bundler](using-without-bundler/summary.md)"
msgstr "[Bundler無しで使う](using-without-bundler/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Rails Preloaders and RSpec](rails-preloaders-and-rspec/summary.md)"
msgstr "[Railsの事前読込器とRSpec](rails-preloaders-and-rspec/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Defining factories](defining/summary.md)"
msgstr "[ファクトリ定義](defining/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Factory name and attributes](defining/name-attributes.md)"
msgstr "[ファクトリ名と属性](defining/name-attributes.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Specifying the class explicitly](defining/explicit-class.md)"
msgstr "[クラスを明示的に指定](defining/explicit-class.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Definition file paths](defining/file-paths.md)"
msgstr "[定義ファイルパス](defining/file-paths.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Hash attributes](defining/hash-attributes.md)"
msgstr "[ハッシュ属性](defining/hash-attributes.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Best practices](defining/best-practices.md)"
msgstr "[ベストプラクティス](defining/best-practices.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Static Attributes (deprecated)](defining/static-attributes.md)"
msgstr "[静的属性（廃止）](defining/static-attributes.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Using factories](using-factories/summary.md)"
msgstr "[ファクトリを使う](using-factories/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Build strategies](using-factories/build-strategies.md)"
msgstr "[構築戦略](using-factories/build-strategies.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid ""
"[Building or Creating Multiple Records](building-or-creating-multiple-"
"records/summary.md)"
msgstr ""
"[複数のレコードを構築したり作成したり](building-or-creating-multiple-records/"
"summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Attribute overrides](using-factories/attribute-overrides.md)"
msgstr "[属性の上塗り](using-factories/attribute-overrides.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Aliases](aliases/summary.md)"
msgstr "[別称](aliases/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Dependent Attributes](dependent-attributes/summary.md)"
msgstr "[依存属性](dependent-attributes/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Transient Attributes](transient-attributes/summary.md)"
msgstr "[一過的属性](transient-attributes/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[With other attributes](transient-attributes/with-other-attributes.md)"
msgstr "[他の属性付き](transient-attributes/with-other-attributes.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[With `attributes_for`](transient-attributes/with-attributes_for.md)"
msgstr "[`attributes_for`付き](transient-attributes/with-attributes_for.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[With callbacks](transient-attributes/with-callbacks.md)"
msgstr "[コールバック付き](transient-attributes/with-callbacks.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[With associations](transient-attributes/with-associations.md)"
msgstr "[関連付き](transient-attributes/with-associations.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid ""
"[Method Name / Reserved Word Attributes](method-name-reserved-word-"
"attributes/summary.md)"
msgstr ""
"[メソッド名と予約語の属性](method-name-reserved-word-attributes/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Inheritance](inheritance/summary.md)"
msgstr "[継承](inheritance/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Nested factories](inheritance/nested-factories.md)"
msgstr "[入れ子のファクトリ](inheritance/nested-factories.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid ""
"[Assigning parent explicitly](inheritance/assigning-parent-explicitly.md)"
msgstr "[親を明示的に代入](inheritance/assigning-parent-explicitly.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Best practices](inheritance/best-practices.md)"
msgstr "[ベストプラクティス](inheritance/best-practices.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Associations](associations/summary.md)"
msgstr "[関連](associations/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Implicit definition](associations/implicit-definition.md)"
msgstr "[暗黙定義](associations/implicit-definition.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Explicit definition](associations/explicit-definition.md)"
msgstr "[明示定義](associations/explicit-definition.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Inline definition](associations/inline-definition.md)"
msgstr "[行内定義](associations/inline-definition.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Specifying the factory](associations/specifying-the-factory.md)"
msgstr "[ファクトリの指定](associations/specifying-the-factory.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Overriding attributes](associations/overriding-attributes.md)"
msgstr "[属性の上塗り](associations/overriding-attributes.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Association overrides](associations/association-overrides.md)"
msgstr "[関連の上塗り](associations/association-overrides.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Build strategies](associations/build-strategies.md)"
msgstr "[構築戦略](associations/build-strategies.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Sequences](sequences/summary.md)"
msgstr "[系列](sequences/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Global sequences](sequences/global-sequences.md)"
msgstr "[大域系列](sequences/global-sequences.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[With dynamic attributes](sequences/with-dynamic-attributes.md)"
msgstr "[動的属性付き](sequences/with-dynamic-attributes.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[As implicit attributes](sequences/as-implicit-attributes.md)"
msgstr "[暗黙属性として](sequences/as-implicit-attributes.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Inline sequences](sequences/inline-sequences.md)"
msgstr "[行内系列](sequences/inline-sequences.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Initial value](sequences/initial-value.md)"
msgstr "[初期値](sequences/initial-value.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Without a block](sequences/without-a-block.md)"
msgstr "[ブロック無し](sequences/without-a-block.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Aliases](sequences/aliases.md)"
msgstr "[別称](sequences/aliases.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Rewinding](sequences/rewinding.md)"
msgstr "[巻き戻し](sequences/rewinding.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Uniqueness](sequences/uniqueness.md)"
msgstr "[一意性](sequences/uniqueness.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Traits](traits/summary.md)"
msgstr "[トレイト](traits/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[As implicit attributes](traits/as-implicit-attributes.md)"
msgstr "[暗黙属性として](traits/as-implicit-attributes.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Using traits](traits/using.md)"
msgstr "[トレイトを使う](traits/using.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Enum traits](traits/enum.md)"
msgstr "[列挙トレイト](traits/enum.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Attribute precedence](traits/attribute-precedence.md)"
msgstr "[属性の優先度](traits/attribute-precedence.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[In child factories](traits/in-child-factories.md)"
msgstr "[子のファクトリの内部](traits/in-child-factories.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[As mixins](traits/mixins.md)"
msgstr "[ミックスインとして](traits/mixins.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[With associations](traits/with-associations.md)"
msgstr "[関連付き](traits/with-associations.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Traits within traits](traits/traits-within-traits.md)"
msgstr "[トレイト内トレイト](traits/traits-within-traits.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[With transient attributes](traits/with-transient-attributes.md)"
msgstr "[一過的属性付き](traits/with-transient-attributes.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Callbacks](callbacks/summary.md)"
msgstr "[コールバック](callbacks/summary.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Multiple callbacks](callbacks/multiple-callbacks.md)"
msgstr "[複数コールバック](callbacks/multiple-callbacks.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Global callbacks](callbacks/global-callbacks.md)"
msgstr "[大域コールバック](callbacks/global-callbacks.md)"

#. type: Bullet: '  - '
#: ../docs/src/SUMMARY.md:91
msgid "[Symbol#to_proc](callbacks/symbol-to_proc.md)"
msgstr "[Symbol#to_proc](callbacks/symbol-to_proc.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Modifying factories](modifying-factories/summary.md)"
msgstr "[ファクトリの変更](modifying-factories/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Linting Factories](linting-factories/summary.md)"
msgstr "[ファクトリのリント](linting-factories/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Custom Construction](custom-construction/summary.md)"
msgstr "[独自の構築](custom-construction/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Custom Strategies](custom-strategies/summary.md)"
msgstr "[独自の戦略](custom-strategies/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid "[Custom Callbacks](custom-callbacks/summary.md)"
msgstr "[独自コールバック](custom-callbacks/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid ""
"[Custom Methods to Persist Objects](custom-methods-to-persist-objects/"
"summary.md)"
msgstr ""
"[オブジェクトを永続化するための独自メソッド](custom-methods-to-persist-"
"objects/summary.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:91
msgid ""
"[ActiveSupport Instrumentation](activesupport-instrumentation/summary.md)"
msgstr "[ActiveSupportの計装](activesupport-instrumentation/summary.md)"

#. type: Title ##
#: ../docs/src/SUMMARY.md:92
#, no-wrap
msgid "Cookbook"
msgstr "レシピ"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:97
msgid "[`has_many` associations](cookbook/has_many-associations.md)"
msgstr "[`has_many`関連](cookbook/has_many-associations.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:97
msgid ""
"[`has_and_belongs_to_many` associations](cookbook/has_and_belongs_to_many-"
"associations.md)"
msgstr ""
"[`has_and_belongs_to_many`関連](cookbook/has_and_belongs_to_many-"
"associations.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:97
msgid "[Polymorphic associations](cookbook/polymorphic-associations.md)"
msgstr "[多相関連](cookbook/polymorphic-associations.md)"

#. type: Bullet: '- '
#: ../docs/src/SUMMARY.md:97
msgid "[Interconnected associations](cookbook/interconnected-associations.md)"
msgstr "[相互接続関連](cookbook/interconnected-associations.md)"

#. type: Title #
#: ../NAME.md:1
#, no-wrap
msgid "Project Naming History"
msgstr "プロジェクト名の歴史"

#. type: Title ##
#: ../NAME.md:3
#, no-wrap
msgid "Factory Girl"
msgstr "Factory Girl"

#. type: Plain text
#: ../NAME.md:7
msgid ""
"This library was [initially released](https://robots.thoughtbot.com/waiting-"
"for-a-factory-girl)  in 2008 with the name \"Factory Girl\"."
msgstr ""
"このライブラリは2008年に「Factory Girl」という名前で[初回リリース](https://"
"robots.thoughtbot.com/waiting-for-a-factory-girl)されました。"

#. type: Plain text
#: ../NAME.md:13
msgid ""
"We chose the name as a nod in the direction of the [Factory method](https://"
"en.wikipedia.org/wiki/Factory_method_pattern)  and [Object Mother](http://"
"martinfowler.com/bliki/ObjectMother.html) software patterns from the _Design "
"Patterns_ book, and as a reference to the [Rolling Stones song](https://www."
"youtube.com/watch?v=4jKix2DFlnA) of the same name."
msgstr ""
"*デザインパターン*本のソフトウェアパターンである[ファクトリーメソッド]"
"(https://en.wikipedia.org/wiki/Factory_method_pattern)と[母オブジェクト]"
"(http://martinfowler.com/bliki/ObjectMother.html)の理念に共感して名前を選びま"
"した。\n"
"また同名の[ローリングストーンズの歌](https://www.youtube.com/watch?"
"v=4jKix2DFlnA)への参照にもなっています。"

#. type: Title ##
#: ../NAME.md:14
#, no-wrap
msgid "Factory Bot"
msgstr "Factory Bot"

#. type: Plain text
#: ../NAME.md:18
msgid ""
"The name \"Factory Girl\" was confusing to some developers who encountered "
"this library, and offensive or problematic to others. In October 2017 we "
"[renamed the library](https://robots.thoughtbot.com/factory_bot)  to "
"\"Factory Bot\"."
msgstr ""
"「Factory Girl」という名前は、このライブラリを知った開発者や攻撃的ないし問題"
"があるように感じたりする人にとって困惑するものでした。\n"
"2017年10月に「Factory Bot」に[ライブラリを改名](https://robots.thoughtbot."
"com/factory_bot)しました。"

#. type: Title #
#: ../docs/src/activesupport-instrumentation/summary.md:1
#, no-wrap
msgid "ActiveSupport Instrumentation"
msgstr "ActiveSupportの計装"

#. type: Plain text
#: ../docs/src/activesupport-instrumentation/summary.md:7
msgid ""
"In order to track what factories are created (and with what build strategy), "
"`ActiveSupport::Notifications` are included to provide a way to subscribe to "
"factories being compiled and run. One example would be to track factories "
"based on a threshold of execution time."
msgstr ""
"何のファクトリが作られたか（またどの構築戦略か）把握する目的で、コンパイルさ"
"れて走るファクトリを購読する方法を提供するために`ActiveSupport::"
"Notifications`がincludeされています。\n"
"一例としては実行時間の閾値に基づいてファクトリを把握することです。"

#. type: Fenced code block (ruby)
#: ../docs/src/activesupport-instrumentation/summary.md:8
#, no-wrap
msgid ""
"ActiveSupport::Notifications.subscribe(\"factory_bot.run_factory\") do |name, start, finish, id, payload|\n"
"  execution_time_in_seconds = finish - start\n"
"\n"
"  if execution_time_in_seconds >= 0.5\n"
"    $stderr.puts \"Slow factory: #{payload[:name]} using strategy #{payload[:strategy]}\"\n"
"  end\n"
"end\n"
msgstr ""
"ActiveSupport::Notifications.subscribe(\"factory_bot.run_factory\") do |name, start, finish, id, payload|\n"
"  execution_time_in_seconds = finish - start\n"
"\n"
"  if execution_time_in_seconds >= 0.5\n"
"    $stderr.puts \"Slow factory: #{payload[:name]} using strategy #{payload[:strategy]}\"\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/activesupport-instrumentation/summary.md:21
msgid ""
"Another example would be tracking all factories and how they're used "
"throughout your test suite. If you're using RSpec, it's as simple as adding "
"a `before(:suite)` and `after(:suite)`:"
msgstr ""
"別の例としては全てのファクトリを対象にテストスートを通じてどのように使われた"
"かを追跡するものです。\n"
"RSpecを使っているとき、`before(:suite)`と`after(:suite)`を加えるだけです。"

#. type: Fenced code block (ruby)
#: ../docs/src/activesupport-instrumentation/summary.md:22
#, no-wrap
msgid ""
"factory_bot_results = {}\n"
"config.before(:suite) do\n"
"  ActiveSupport::Notifications.subscribe(\"factory_bot.run_factory\") do |name, start, finish, id, payload|\n"
"    factory_name = payload[:name]\n"
"    strategy_name = payload[:strategy]\n"
"    factory_bot_results[factory_name] ||= {}\n"
"    factory_bot_results[factory_name][strategy_name] ||= 0\n"
"    factory_bot_results[factory_name][strategy_name] += 1\n"
"  end\n"
"end\n"
"\n"
"config.after(:suite) do\n"
"  puts factory_bot_results\n"
"end\n"
msgstr ""
"factory_bot_results = {}\n"
"config.before(:suite) do\n"
"  ActiveSupport::Notifications.subscribe(\"factory_bot.run_factory\") do |name, start, finish, id, payload|\n"
"    factory_name = payload[:name]\n"
"    strategy_name = payload[:strategy]\n"
"    factory_bot_results[factory_name] ||= {}\n"
"    factory_bot_results[factory_name][strategy_name] ||= 0\n"
"    factory_bot_results[factory_name][strategy_name] += 1\n"
"  end\n"
"end\n"
"\n"
"config.after(:suite) do\n"
"  puts factory_bot_results\n"
"end\n"

#. type: Plain text
#: ../docs/src/activesupport-instrumentation/summary.md:40
msgid ""
"Another example could involve tracking the attributes and traits that "
"factories are compiled with. If you're using RSpec, you could add `before(:"
"suite)` and `after(:suite)` blocks that subscribe to `factory_bot."
"compile_factory` notifications:"
msgstr ""
"別の例として、ファクトリが一緒にコンパイルされる属性とトレイトを追跡すること"
"が関係します。\n"
"RSpecを使っているとき、`before(:suite)`及び`after(:suite)`ブロックを加えて"
"`factory_bot.compile_factory`の通知を購読できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/activesupport-instrumentation/summary.md:41
#, no-wrap
msgid ""
"factory_bot_results = {}\n"
"config.before(:suite) do\n"
"  ActiveSupport::Notifications.subscribe(\"factory_bot.compile_factory\") do |name, start, finish, id, payload|\n"
"    factory_name = payload[:name]\n"
"    factory_class = payload[:class]\n"
"    attributes = payload[:attributes]\n"
"    traits = payload[:traits]\n"
"    factory_bot_results[factory_class] ||= {}\n"
"    factory_bot_results[factory_class][factory_name] = {\n"
"      attributes: attributes.map(&:name)\n"
"      traits: traits.map(&:name)\n"
"    }\n"
"  end\n"
"end\n"
"\n"
"config.after(:suite) do\n"
"  puts factory_bot_results\n"
"end\n"
msgstr ""
"factory_bot_results = {}\n"
"config.before(:suite) do\n"
"  ActiveSupport::Notifications.subscribe(\"factory_bot.compile_factory\") do |name, start, finish, id, payload|\n"
"    factory_name = payload[:name]\n"
"    factory_class = payload[:class]\n"
"    attributes = payload[:attributes]\n"
"    traits = payload[:traits]\n"
"    factory_bot_results[factory_class] ||= {}\n"
"    factory_bot_results[factory_class][factory_name] = {\n"
"      attributes: attributes.map(&:name)\n"
"      traits: traits.map(&:name)\n"
"    }\n"
"  end\n"
"end\n"
"\n"
"config.after(:suite) do\n"
"  puts factory_bot_results\n"
"end\n"

#. type: Title #
#: ../docs/src/aliases/summary.md:1 ../docs/src/sequences/aliases.md:1
#, no-wrap
msgid "Aliases"
msgstr "別称"

#. type: Plain text
#: ../docs/src/aliases/summary.md:9
msgid ""
"factory\\_bot allows you to define aliases to existing factories to make "
"them easier to re-use. This could come in handy when, for example, your Post "
"object has an author attribute that actually refers to an instance of a User "
"class.  While normally factory\\_bot can infer the factory name from the "
"association name, in this case it will look for an author factory in vain. "
"So, alias your user factory so it can be used under alias names."
msgstr ""
"factory\\_botでは既存のファクトリに別称を定義して簡単に再利用できます。\n"
"この機能がしっくりくるのは、例えば、Postオブジェクトに著者の属性があり、実際"
"にはUserクラスのインスタンスを参照しているときです。\n"
"通常factory\\_botは関連名からファクトリ名を推定できるものの、この場合は著者の"
"ファクトリを探して徒労になります。\n"
"そのため利用者のファクトリに別称を付ければ別称名で使えます。"

#. type: Fenced code block (ruby)
#: ../docs/src/aliases/summary.md:10
#, no-wrap
msgid ""
"factory :user, aliases: [:author, :commenter] do\n"
"  first_name { \"John\" }\n"
"  last_name { \"Doe\" }\n"
"  date_of_birth { 18.years.ago }\n"
"end\n"
"\n"
"factory :post do\n"
"  # The alias allows us to write author instead of\n"
"  # association :author, factory: :user\n"
"  author\n"
"  title { \"How to read a book effectively\" }\n"
"  body { \"There are five steps involved.\" }\n"
"end\n"
"\n"
"factory :comment do\n"
"  # The alias allows us to write commenter instead of\n"
"  # association :commenter, factory: :user\n"
"  commenter\n"
"  body { \"Great article!\" }\n"
"end\n"
msgstr ""
"factory :user, aliases: [:author, :commenter] do\n"
"  first_name { \"John\" }\n"
"  last_name { \"Doe\" }\n"
"  date_of_birth { 18.years.ago }\n"
"end\n"
"\n"
"factory :post do\n"
"  # 別称を使うと以下の代わりに著者で書けます。\n"
"  # association :author, factory: :user\n"
"  author\n"
"  title { \"How to read a book effectively\" }\n"
"  body { \"There are five steps involved.\" }\n"
"end\n"
"\n"
"factory :comment do\n"
"  # 別称を使うと以下の代わりに評論家で書けます。\n"
"  # association :commenter, factory: :user\n"
"  commenter\n"
"  body { \"Great article!\" }\n"
"end\n"

#. type: Title #
#: ../docs/src/associations/association-overrides.md:1
#, no-wrap
msgid "Association overrides"
msgstr "関連の上塗り"

#. type: Plain text
#: ../docs/src/associations/association-overrides.md:4
msgid "Attribute overrides can be used to link associated objects:"
msgstr "属性の上塗りは紐付くオブジェクトを結び付けるのに使えます。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/association-overrides.md:5
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :author do\n"
"    name { 'Taylor' }\n"
"  end\n"
"\n"
"  factory :post do\n"
"    author\n"
"  end\n"
"end\n"
"\n"
"eunji = build(:author, name: 'Eunji')\n"
"post = build(:post, author: eunji)\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :author do\n"
"    name { 'Taylor' }\n"
"  end\n"
"\n"
"  factory :post do\n"
"    author\n"
"  end\n"
"end\n"
"\n"
"eunji = build(:author, name: 'Eunji')\n"
"post = build(:post, author: eunji)\n"

#. type: Plain text
#: ../docs/src/associations/association-overrides.md:23
msgid ""
"Ruby 3.1's support for [omitting values][] from `Hash` literals dovetails "
"with attribute overrides, and provides an opportunity to limit the "
"repetition of variable names:"
msgstr ""
"Ruby 3.1の`Hash`表記での[バリューの省略][omitting values]対応は属性の上塗りに"
"ぴったり馴染む機能で、変数名の繰り返しになるところを削減できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/association-overrides.md:24
#, no-wrap
msgid ""
"author = build(:author, name: 'Eunji')\n"
"\n"
"post = build(:post, author:)\n"
msgstr ""
"author = build(:author, name: 'Eunji')\n"
"\n"
"post = build(:post, author:)\n"

#. type: Link reference
#: ../docs/src/associations/association-overrides.md:30
#: ../docs/src/using-factories/attribute-overrides.md:26
#, no-wrap
msgid "[omitting values]: https://docs.ruby-lang.org/en/3.1/syntax/literals_rdoc.html#label-Hash+Literals"
msgstr "[omitting values]: https://docs.ruby-lang.org/en/3.1/syntax/literals_rdoc.html#label-Hash+Literals"

#. type: Plain text
#: ../docs/src/associations/build-strategies.md:4
msgid ""
"Associations default to using the same build strategy as their parent object:"
msgstr "関連は既定で親オブジェクトと同じ構築戦略を使います。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/build-strategies.md:5
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :author\n"
"\n"
"  factory :post do\n"
"    author\n"
"  end\n"
"end\n"
"\n"
"post = build(:post)\n"
"post.new_record?        # => true\n"
"post.author.new_record? # => true\n"
"\n"
"post = create(:post)\n"
"post.new_record?        # => false\n"
"post.author.new_record? # => false\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :author\n"
"\n"
"  factory :post do\n"
"    author\n"
"  end\n"
"end\n"
"\n"
"post = build(:post)\n"
"post.new_record?        # => true\n"
"post.author.new_record? # => true\n"
"\n"
"post = create(:post)\n"
"post.new_record?        # => false\n"
"post.author.new_record? # => false\n"

#. type: Plain text
#: ../docs/src/associations/build-strategies.md:27
msgid ""
"This is different than the default behavior for previous versions of "
"factory\\_bot, where the association strategy would not always match the "
"strategy of the parent object. If you want to continue using the old "
"behavior, you can set the `use_parent_strategy` configuration option to "
"`false`."
msgstr ""
"これは以前のバージョンのfactory\\_botの既定の挙動とは異なります。\n"
"関連の戦略は必ずしも親オブジェクトの戦略と合致していませんでした。\n"
"古い挙動を使い続けたいときは、`use_parent_strategy`構成オプションを`false`に"
"設定できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/build-strategies.md:28
#, no-wrap
msgid ""
"FactoryBot.use_parent_strategy = false\n"
"\n"
"# Builds and saves a User and a Post\n"
"post = create(:post)\n"
"post.new_record?        # => false\n"
"post.author.new_record? # => false\n"
"\n"
"# Builds and saves a User, and then builds but does not save a Post\n"
"post = build(:post)\n"
"post.new_record?        # => true\n"
"post.author.new_record? # => false\n"
msgstr ""
"FactoryBot.use_parent_strategy = false\n"
"\n"
"# UserとPostを構築して保存します。\n"
"post = create(:post)\n"
"post.new_record?        # => false\n"
"post.author.new_record? # => false\n"
"\n"
"# Userを構築して保存します。またPostを構築するものの保存はしません。\n"
"post = build(:post)\n"
"post.new_record?        # => true\n"
"post.author.new_record? # => false\n"

#. type: Plain text
#: ../docs/src/associations/build-strategies.md:43
msgid ""
"To not save the associated object, specify `strategy: :build` in the factory:"
msgstr ""
"紐付くオブジェクトを保存しないためには、ファクトリで`strategy: :build`を指定"
"します。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/build-strategies.md:44
#, no-wrap
msgid ""
"FactoryBot.use_parent_strategy = false\n"
"\n"
"factory :post do\n"
"  # ...\n"
"  association :author, factory: :user, strategy: :build\n"
"end\n"
"\n"
"# Builds a User, and then builds a Post, but does not save either\n"
"post = build(:post)\n"
"post.new_record?        # => true\n"
"post.author.new_record? # => true\n"
msgstr ""
"FactoryBot.use_parent_strategy = false\n"
"\n"
"factory :post do\n"
"  # ...\n"
"  association :author, factory: :user, strategy: :build\n"
"end\n"
"\n"
"# Userを構築し、Postを構築します。ただし何れも保存しません。\n"
"post = build(:post)\n"
"post.new_record?        # => true\n"
"post.author.new_record? # => true\n"

#. type: Plain text
#: ../docs/src/associations/build-strategies.md:60
msgid ""
"Note that the `strategy: :build` option must be passed to an explicit call "
"to `association`, and cannot be used with implicit associations:"
msgstr ""
"なお`strategy: :build`オプションは`association`の明示的な呼び出しで渡さなけれ"
"ばなりません。\n"
"暗黙の関連では使えません。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/build-strategies.md:61
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  author strategy: :build    # <<< this does *not* work; causes author_id to be nil\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  author strategy: :build    # <<< これはうまくいき「ません」。author_idがnilになります。\n"

#. type: Title #
#: ../docs/src/associations/explicit-definition.md:1
#, no-wrap
msgid "Explicit definition"
msgstr "明示定義"

#. type: Plain text
#: ../docs/src/associations/explicit-definition.md:5
msgid ""
"You can define associations explicitly. This can be handy especially when "
"[Overriding attributes](overriding-attributes.md)"
msgstr ""
"関連を明示的に定義できます。\n"
"[属性を上塗りする](overriding-attributes.md)ときに特にしっくりくることがあり"
"ます。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/explicit-definition.md:6
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  association :author\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  association :author\n"
"end\n"

#. type: Title #
#: ../docs/src/associations/implicit-definition.md:1
#, no-wrap
msgid "Implicit definition"
msgstr "暗黙定義"

#. type: Plain text
#: ../docs/src/associations/implicit-definition.md:5
msgid ""
"It's possible to set up associations within factories. If the factory name "
"is the same as the association name, the factory name can be left out."
msgstr ""
"ファクトリ内で関連を設定することができます。\n"
"ファクトリ名が関連名と同じとき、ファクトリ名を省けます。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/implicit-definition.md:6
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  author\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  author\n"
"end\n"

#. type: Title #
#: ../docs/src/associations/inline-definition.md:1
#, no-wrap
msgid "Inline definition"
msgstr "行内定義"

#. type: Plain text
#: ../docs/src/associations/inline-definition.md:5
msgid ""
"You can also define associations inline within regular attributes, but note "
"that the value will be `nil` when using the `attributes_for` strategy."
msgstr ""
"通常の属性内に行内で関連を定義することもできます。\n"
"ただし`attributes_for`戦略を使うときは値が`nil`になることに注意してください。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/inline-definition.md:6
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  author { association :author }\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  author { association :author }\n"
"end\n"

#. type: Title #
#: ../docs/src/associations/overriding-attributes.md:1
#, no-wrap
msgid "Overriding attributes"
msgstr "属性の上塗り"

#. type: Plain text
#: ../docs/src/associations/overriding-attributes.md:4
msgid "You can also override attributes on associations."
msgstr "関連で属性の上塗りもできます。"

#. type: Plain text
#: ../docs/src/associations/overriding-attributes.md:6
#: ../docs/src/associations/specifying-the-factory.md:7
msgid "Implicitly:"
msgstr "暗黙には以下とします。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/overriding-attributes.md:7
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  author factory: :author, last_name: \"Writely\"\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  author factory: :author, last_name: \"Writely\"\n"
"end\n"

#. type: Plain text
#: ../docs/src/associations/overriding-attributes.md:15
#: ../docs/src/associations/specifying-the-factory.md:16
msgid "Explicitly:"
msgstr "明示的には以下とします。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/overriding-attributes.md:17
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  association :author, last_name: \"Writely\"\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  association :author, last_name: \"Writely\"\n"
"end\n"

#. type: Plain text
#: ../docs/src/associations/overriding-attributes.md:25
msgid "Or inline using attributes from the factory:"
msgstr "もしくはファクトリの属性を使って行内でもできます。"

#. type: Fenced code block (rb)
#: ../docs/src/associations/overriding-attributes.md:26
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  author_last_name { \"Writely\" }\n"
"  author { association :author, last_name: author_last_name }\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  author_last_name { \"Writely\" }\n"
"  author { association :author, last_name: author_last_name }\n"
"end\n"

#. type: Title #
#: ../docs/src/associations/specifying-the-factory.md:1
#, no-wrap
msgid "Specifying the factory"
msgstr "ファクトリの指定"

#. type: Plain text
#: ../docs/src/associations/specifying-the-factory.md:5
msgid ""
"You can specify a different factory (although [Aliases](../aliases/summary."
"md)  might also help you out here)."
msgstr ""
"異なるファクトリを指定することもできます（[別称](../aliases/summary.md)も役立"
"つかもしれませんが）。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/specifying-the-factory.md:8
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  author factory: :user\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  author factory: :user\n"
"end\n"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/specifying-the-factory.md:17
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  association :author, factory: :user\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  association :author, factory: :user\n"
"end\n"

#. type: Plain text
#: ../docs/src/associations/specifying-the-factory.md:25
msgid "Inline:"
msgstr "行内では以下とします。"

#. type: Fenced code block (ruby)
#: ../docs/src/associations/specifying-the-factory.md:26
#, no-wrap
msgid ""
"factory :post do\n"
"  # ...\n"
"  author { association :user }\n"
"end\n"
msgstr ""
"factory :post do\n"
"  # ...\n"
"  author { association :user }\n"
"end\n"

#. type: Title #
#: ../docs/src/building-or-creating-multiple-records/summary.md:1
#, no-wrap
msgid "Building or Creating Multiple Records"
msgstr "複数のレコードの構築と作成"

#. type: Plain text
#: ../docs/src/building-or-creating-multiple-records/summary.md:5
msgid ""
"Sometimes, you'll want to create or build multiple instances of a factory at "
"once."
msgstr ""
"ファクトリの複数のインスタンスを一括で作成したり構築したりしたいときがありま"
"す。"

#. type: Fenced code block (ruby)
#: ../docs/src/building-or-creating-multiple-records/summary.md:6
#, no-wrap
msgid ""
"built_users   = build_list(:user, 25)\n"
"created_users = create_list(:user, 25)\n"
msgstr ""
"built_users   = build_list(:user, 25)\n"
"created_users = create_list(:user, 25)\n"

#. type: Plain text
#: ../docs/src/building-or-creating-multiple-records/summary.md:14
msgid ""
"These methods will build or create a specific amount of factories and return "
"them as an array. To set the attributes for each of the factories, you can "
"pass in a hash as you normally would."
msgstr ""
"これらのメソッドは指定量のファクトリを構築ないし作成し、配列として返しま"
"す。\n"
"各ファクトリに属性を設定する上ではいつも通りハッシュで渡せます。"

#. type: Fenced code block (ruby)
#: ../docs/src/building-or-creating-multiple-records/summary.md:15
#, no-wrap
msgid "twenty_year_olds = build_list(:user, 25, date_of_birth: 20.years.ago)\n"
msgstr "twenty_year_olds = build_list(:user, 25, date_of_birth: 20.years.ago)\n"

#. type: Plain text
#: ../docs/src/building-or-creating-multiple-records/summary.md:21
msgid ""
"In order to set different attributes for each factory, these methods may be "
"passed a block, with the factory and the index as parameters:"
msgstr ""
"各ファクトリに異なる属性を設定するためには、これらのメソッドにブロックを渡せ"
"ます。\n"
"そこでファクトリと仮引数として添字を持たせます。"

#. type: Fenced code block (ruby)
#: ../docs/src/building-or-creating-multiple-records/summary.md:22
#, no-wrap
msgid ""
"twenty_somethings = build_list(:user, 10) do |user, i|\n"
"  user.date_of_birth = (20 + i).years.ago\n"
"end\n"
msgstr ""
"twenty_somethings = build_list(:user, 10) do |user, i|\n"
"  user.date_of_birth = (20 + i).years.ago\n"
"end\n"

#. type: Plain text
#: ../docs/src/building-or-creating-multiple-records/summary.md:30
msgid ""
"`create_list` passes saved instances into the block. If you modify the "
"instance, you must save it again:"
msgstr ""
"`create_list`は保存されたインスタンスをブロックに保存します。\n"
"インスタンスを変更したらまた保存しなければなりません。"

#. type: Fenced code block (ruby)
#: ../docs/src/building-or-creating-multiple-records/summary.md:31
#, no-wrap
msgid ""
"twenty_somethings = create_list(:user, 10) do |user, i|\n"
"  user.date_of_birth = (20 + i).years.ago\n"
"  user.save!\n"
"end\n"
msgstr ""
"twenty_somethings = create_list(:user, 10) do |user, i|\n"
"  user.date_of_birth = (20 + i).years.ago\n"
"  user.save!\n"
"end\n"

#. type: Plain text
#: ../docs/src/building-or-creating-multiple-records/summary.md:39
msgid "`build_stubbed_list` will give you fully stubbed out instances:"
msgstr ""
"`build_stubbed_list`では、完全にスタブ化されたインスタンスが得られます。"

#. type: Fenced code block (ruby)
#: ../docs/src/building-or-creating-multiple-records/summary.md:40
#, no-wrap
msgid "stubbed_users = build_stubbed_list(:user, 25) # array of stubbed users\n"
msgstr "stubbed_users = build_stubbed_list(:user, 25) # スタブ化された利用者の配列\n"

#. type: Plain text
#: ../docs/src/building-or-creating-multiple-records/summary.md:45
msgid ""
"There's also a set of `*_pair` methods for creating two records at a time:"
msgstr "2つのレコードを一括で作る`*_pair`メソッドの一式もあります。"

#. type: Fenced code block (ruby)
#: ../docs/src/building-or-creating-multiple-records/summary.md:46
#, no-wrap
msgid ""
"built_users   = build_pair(:user) # array of two built users\n"
"created_users = create_pair(:user) # array of two created users\n"
msgstr ""
"built_users   = build_pair(:user) # 2つの構築された利用者の配列\n"
"created_users = create_pair(:user) # 2つの作成された利用者の配列\n"

#. type: Plain text
#: ../docs/src/building-or-creating-multiple-records/summary.md:53
msgid ""
"If you need multiple attribute hashes, `attributes_for_list` will generate "
"them:"
msgstr "複数の属性のハッシュが必要なとき、`attributes_for_list`で生成します。"

#. type: Fenced code block (ruby)
#: ../docs/src/building-or-creating-multiple-records/summary.md:54
#, no-wrap
msgid "users_attrs = attributes_for_list(:user, 25) # array of attribute hashes\n"
msgstr "users_attrs = attributes_for_list(:user, 25) # 属性ハッシュの配列\n"

#. type: Title #
#: ../docs/src/callbacks/global-callbacks.md:1
#, no-wrap
msgid "Global callbacks"
msgstr "大域コールバック"

#. type: Plain text
#: ../docs/src/callbacks/global-callbacks.md:5
msgid ""
"To override callbacks for all factories, define them within the `FactoryBot."
"define` block:"
msgstr ""
"全てのファクトリにコールバックを上塗りするには、`FactoryBot.define`ブロック内"
"で定義します。"

#. type: Fenced code block (ruby)
#: ../docs/src/callbacks/global-callbacks.md:6
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  after(:build) { |object| puts \"Built #{object}\" }\n"
"  after(:create) { |object| AuditLog.create(attrs: object.attributes) }\n"
"\n"
"  factory :user do\n"
"    name { \"John Doe\" }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  after(:build) { |object| puts \"Built #{object}\" }\n"
"  after(:create) { |object| AuditLog.create(attrs: object.attributes) }\n"
"\n"
"  factory :user do\n"
"    name { \"John Doe\" }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/callbacks/multiple-callbacks.md:1
#, no-wrap
msgid "Multiple callbacks"
msgstr "複数コールバック"

#. type: Plain text
#: ../docs/src/callbacks/multiple-callbacks.md:4
msgid "You can also define multiple types of callbacks on the same factory:"
msgstr "同じファクトリに複数の種類のコールバックを定義することもできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/callbacks/multiple-callbacks.md:5
#, no-wrap
msgid ""
"factory :user do\n"
"  after(:build)  { |user| do_something_to(user) }\n"
"  after(:create) { |user| do_something_else_to(user) }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  after(:build)  { |user| do_something_to(user) }\n"
"  after(:create) { |user| do_something_else_to(user) }\n"
"end\n"

#. type: Plain text
#: ../docs/src/callbacks/multiple-callbacks.md:14
msgid ""
"Factories can also define any number of the same kind of callback.  These "
"callbacks will be executed in the order they are specified:"
msgstr ""
"ファクトリは同じ種類のコールバックをいくらでも定義することもできます。\n"
"こうしたコールバックは指定された順番に実行されます。"

#. type: Fenced code block (ruby)
#: ../docs/src/callbacks/multiple-callbacks.md:15
#, no-wrap
msgid ""
"factory :user do\n"
"  after(:create) { this_runs_first }\n"
"  after(:create) { then_this }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  after(:create) { this_runs_first }\n"
"  after(:create) { then_this }\n"
"end\n"

#. type: Plain text
#: ../docs/src/callbacks/multiple-callbacks.md:23
msgid ""
"Calling `create` will invoke both `after_build` and `after_create` callbacks."
msgstr ""
"`create`を呼ぶと`after_build`コールバックと`after_create`コールバックの両方と"
"もが呼ばれます。"

#. type: Plain text
#: ../docs/src/callbacks/multiple-callbacks.md:26
msgid ""
"Also, like standard attributes, child factories will inherit (and can also "
"define) callbacks from their parent factory."
msgstr ""
"また標準的な属性と同様に、子のファクトリは親ファクトリからコールバックを受け"
"継ぎます（また定義もできます）。"

#. type: Plain text
#: ../docs/src/callbacks/multiple-callbacks.md:30
msgid ""
"Multiple callbacks can be assigned to run a block; this is useful when "
"building various strategies that run the same code (since there are no "
"callbacks that are shared across all strategies)."
msgstr ""
"複数のコールバックはブロックを走らせて代入できます。\n"
"（全ての戦略を通じて共有されるコールバックはないため）同じコードを様々な戦略"
"で構築するときに有用です。"

#. type: Fenced code block (ruby)
#: ../docs/src/callbacks/multiple-callbacks.md:31
#, no-wrap
msgid ""
"factory :user do\n"
"  callback(:after_stub, :before_create) { do_something }\n"
"  after(:stub, :create) { do_something_else }\n"
"  before(:create, :custom) { do_a_third_thing }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  callback(:after_stub, :before_create) { do_something }\n"
"  after(:stub, :create) { do_something_else }\n"
"  before(:create, :custom) { do_a_third_thing }\n"
"end\n"

#. type: Title #
#: ../docs/src/callbacks/summary.md:1
#, no-wrap
msgid "Callbacks"
msgstr "コールバック"

#. type: Plain text
#: ../docs/src/callbacks/summary.md:4
msgid "factory\\_bot makes four callbacks available:"
msgstr "factory\\_botは4つのコールバックを作れます。"

#. type: Plain text
#: ../docs/src/callbacks/summary.md:9
#, no-wrap
msgid ""
"* after(:build)   - called after a factory is built   (via `FactoryBot.build`, `FactoryBot.create`)\n"
"* before(:create) - called before a factory is saved  (via `FactoryBot.create`)\n"
"* after(:create)  - called after a factory is saved   (via `FactoryBot.create`)\n"
"* after(:stub)    - called after a factory is stubbed (via `FactoryBot.build_stubbed`)\n"
msgstr ""
"* after(:build) はファクトリが構築された後に（`FactoryBot.build`と`FactoryBot.create`を介して）呼ばれます。\n"
"* before(:create) はファクトリが保存される前に（`FactoryBot.create`を介して）呼ばれます。\n"
"* after(:create) はファクトリが保存された後に（`FactoryBot.create`を介して）呼ばれます。\n"
"* after(:stub) はファクトリがスタブ化された後に（`FactoryBot.build_stubbed`を介して）呼ばれます。\n"

#. type: Plain text
#: ../docs/src/callbacks/summary.md:11
msgid "Examples:"
msgstr "例は以下です。"

#. type: Fenced code block (ruby)
#: ../docs/src/callbacks/summary.md:12
#, no-wrap
msgid ""
"# Define a factory that calls the generate_hashed_password method after the user factory is built\n"
"factory :user do\n"
"  after(:build) { |user, context| generate_hashed_password(user) }\n"
"end\n"
msgstr ""
"# 利用者ファクトリが構築された後にgenerate_hashed_passwordメソッドを呼ぶファクトリを定義します。\n"
"factory :user do\n"
"  after(:build) { |user, context| generate_hashed_password(user) }\n"
"end\n"

#. type: Plain text
#: ../docs/src/callbacks/summary.md:19
msgid "Note that you'll have an instance of the object in the block."
msgstr "なお、ブロックのオブジェクトのインスタンスが得られます。"

#. type: Title #
#: ../docs/src/callbacks/symbol-to_proc.md:1
#, no-wrap
msgid "Symbol#to_proc"
msgstr "Symbol#to_proc"

#. type: Plain text
#: ../docs/src/callbacks/symbol-to_proc.md:4
msgid "You can call callbacks that rely on `Symbol#to_proc`:"
msgstr "`Symbol#to_proc`に頼るコールバックを呼べます。"

#. type: Fenced code block (ruby)
#: ../docs/src/callbacks/symbol-to_proc.md:5
#, no-wrap
msgid ""
"# app/models/user.rb\n"
"class User < ActiveRecord::Base\n"
"  def confirm!\n"
"    # confirm the user account\n"
"  end\n"
"end\n"
"\n"
"# spec/factories.rb\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    after :create, &:confirm!\n"
"  end\n"
"end\n"
"\n"
"create(:user) # creates the user and confirms it\n"
msgstr ""
"# app/models/user.rb\n"
"class User < ActiveRecord::Base\n"
"  def confirm!\n"
"    # 利用者アカウントを確かめます。\n"
"  end\n"
"end\n"
"\n"
"# spec/factories.rb\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    after :create, &:confirm!\n"
"  end\n"
"end\n"
"\n"
"create(:user) # 利用者を作成して確かめます。\n"

#. type: Title #
#: ../docs/src/cookbook/has_and_belongs_to_many-associations.md:1
#, no-wrap
msgid "has_and_belongs_to_many associations"
msgstr "has_and_belongs_to_many関連"

#. type: Plain text
#: ../docs/src/cookbook/has_and_belongs_to_many-associations.md:7
msgid ""
"Generating data for a `has_and_belongs_to_many` relationship is very similar "
"to the above `has_many` relationship, with a small change: you need to pass "
"an array of objects to the model's pluralized attribute name rather than a "
"single object to the singular version of the attribute name."
msgstr ""
"`has_and_belongs_to_many`の関係でデータを生成するのは前述の`has_many`の関係と"
"よく似ています。\n"
"属性名の単数形のバージョンへの単一のオブジェクトではなく、モデルの複数形の属"
"性名にオブジェクトの配列を渡す必要があります。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/has_and_belongs_to_many-associations.md:9
#, no-wrap
msgid ""
"def profile_with_languages(languages_count: 2)\n"
"  FactoryBot.create(:profile) do |profile|\n"
"    FactoryBot.create_list(:language, languages_count, profiles: [profile])\n"
"  end\n"
"end\n"
msgstr ""
"def profile_with_languages(languages_count: 2)\n"
"  FactoryBot.create(:profile) do |profile|\n"
"    FactoryBot.create_list(:language, languages_count, profiles: [profile])\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/cookbook/has_and_belongs_to_many-associations.md:18
msgid "Or with the callback approach:"
msgstr "もしくはコールバックの方法では以下となります。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/has_and_belongs_to_many-associations.md:19
#, no-wrap
msgid ""
"factory :profile_with_languages do\n"
"  transient do\n"
"    languages_count { 2 }\n"
"  end\n"
"\n"
"  after(:create) do |profile, context|\n"
"    create_list(:language, context.languages_count, profiles: [profile])\n"
"    profile.reload\n"
"  end\n"
"end\n"
msgstr ""
"factory :profile_with_languages do\n"
"  transient do\n"
"    languages_count { 2 }\n"
"  end\n"
"\n"
"  after(:create) do |profile, context|\n"
"    create_list(:language, context.languages_count, profiles: [profile])\n"
"    profile.reload\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/cookbook/has_and_belongs_to_many-associations.md:34
msgid ""
"Or the inline association approach (note the use of the `instance` method "
"here to refer to the profile being built):"
msgstr ""
"あるいは行内関連の方法では以下です（なおここでの`instance`の利用は、構築され"
"るプロファイルへの参照です）。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/has_and_belongs_to_many-associations.md:35
#, no-wrap
msgid ""
"factory :profile_with_languages do\n"
"  transient do\n"
"    languages_count { 2 }\n"
"  end\n"
"\n"
"  languages do\n"
"    Array.new(languages_count) do\n"
"      association(:language, profiles: [instance])\n"
"    end\n"
"  end\n"
"end\n"
msgstr ""
"factory :profile_with_languages do\n"
"  transient do\n"
"    languages_count { 2 }\n"
"  end\n"
"\n"
"  languages do\n"
"    Array.new(languages_count) do\n"
"      association(:language, profiles: [instance])\n"
"    end\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/cookbook/has_many-associations.md:1
#, no-wrap
msgid "has_many associations"
msgstr "has_many関連"

#. type: Plain text
#: ../docs/src/cookbook/has_many-associations.md:6
msgid ""
"There are a few ways to generate data for a `has_many` relationship. The "
"simplest approach is to write a helper method in plain Ruby to tie together "
"the different records:"
msgstr ""
"`has_many`の関係でデータを生成するにはいくつか方法があります。\n"
"最も単純な方法は素のRubyで補助メソッドを書いて異なるレコードと結び付けること"
"です。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/has_many-associations.md:7
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"Rachel Sanchez\" }\n"
"  end\n"
"end\n"
"\n"
"def user_with_posts(posts_count: 5)\n"
"  FactoryBot.create(:user) do |user|\n"
"    FactoryBot.create_list(:post, posts_count, user: user)\n"
"  end\n"
"end\n"
"\n"
"create(:user).posts.length # 0\n"
"user_with_posts.posts.length # 5\n"
"user_with_posts(posts_count: 15).posts.length # 15\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"Rachel Sanchez\" }\n"
"  end\n"
"end\n"
"\n"
"def user_with_posts(posts_count: 5)\n"
"  FactoryBot.create(:user) do |user|\n"
"    FactoryBot.create_list(:post, posts_count, user: user)\n"
"  end\n"
"end\n"
"\n"
"create(:user).posts.length # 0\n"
"user_with_posts.posts.length # 5\n"
"user_with_posts(posts_count: 15).posts.length # 15\n"

#. type: Plain text
#: ../docs/src/cookbook/has_many-associations.md:32
msgid ""
"If you prefer to keep the object creation fully within factory\\_bot, you "
"can build the posts in an `after(:create)` callback."
msgstr ""
"オブジェクトの作成を完全にfactory\\_botに留める方が好みであれば、`after(:"
"create)`コールバック内で記事を構築できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/has_many-associations.md:34
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"John Doe\" }\n"
"\n"
"    # user_with_posts will create post data after the user has been created\n"
"    factory :user_with_posts do\n"
"      # posts_count is declared as a transient attribute available in the\n"
"      # callback via the context\n"
"      transient do\n"
"        posts_count { 5 }\n"
"      end\n"
"\n"
"      # the after(:create) yields two values; the user instance itself and the\n"
"      # context, which stores all values from the factory, including transient\n"
"      # attributes; `create_list`'s second argument is the number of records\n"
"      # to create and we make sure the user is associated properly to the post\n"
"      after(:create) do |user, context|\n"
"        create_list(:post, context.posts_count, user: user)\n"
"\n"
"        # You may need to reload the record here, depending on your application\n"
"        user.reload\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create(:user).posts.length # 0\n"
"create(:user_with_posts).posts.length # 5\n"
"create(:user_with_posts, posts_count: 15).posts.length # 15\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"John Doe\" }\n"
"\n"
"    # user_with_postsは利用者が作成された後に記事データを作ります。\n"
"    factory :user_with_posts do\n"
"      # posts_countは文脈を介してコールバックで使える一過的属性として宣言されています。\n"
"      transient do\n"
"        posts_count { 5 }\n"
"      end\n"
"\n"
"      # after(:create) は利用者インスタンス自体と文脈の2つの値を譲渡します。\n"
"      # この文脈には、一過的属性を含むファクトリ由来の全ての値が保管されています。\n"
"      # `create_list`の2つ目の実引数は作成されるレコードの数であり、利用者が適切に記事に紐付いていることを確かめています。\n"
"      after(:create) do |user, context|\n"
"        create_list(:post, context.posts_count, user: user)\n"
"\n"
"        # ここでレコードを再読込する必要があるかもしれません。\n"
"        # アプリケーションに依ります。\n"
"        user.reload\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create(:user).posts.length # 0\n"
"create(:user_with_posts).posts.length # 5\n"
"create(:user_with_posts, posts_count: 15).posts.length # 15\n"

#. type: Plain text
#: ../docs/src/cookbook/has_many-associations.md:74
msgid ""
"Or, for a solution that works with `build`, `build_stubbed`, and `create` "
"(although it doesn't work well with `attributes_for`), you can use inline "
"associations:"
msgstr ""
"もしくは、`build`や`build_stubbed`や`create`で上手くいく（ただし"
"`attributes_for`では上手くいきません）解決策として、行内関連が使えます。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/has_many-associations.md:75
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"Taylor Kim\" }\n"
"\n"
"    factory :user_with_posts do\n"
"      posts { [association(:post)] }\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create(:user).posts.length # 0\n"
"create(:user_with_posts).posts.length # 1\n"
"build(:user_with_posts).posts.length # 1\n"
"build_stubbed(:user_with_posts).posts.length # 1\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"Taylor Kim\" }\n"
"\n"
"    factory :user_with_posts do\n"
"      posts { [association(:post)] }\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create(:user).posts.length # 0\n"
"create(:user_with_posts).posts.length # 1\n"
"build(:user_with_posts).posts.length # 1\n"
"build_stubbed(:user_with_posts).posts.length # 1\n"

#. type: Plain text
#: ../docs/src/cookbook/has_many-associations.md:99
msgid ""
"For more flexibility you can combine this with the `posts_count` transient "
"attribute from the callback example:"
msgstr ""
"柔軟性のため、これをコールバックの例の`posts_count`一過的属性と組み合わせられ"
"ます。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/has_many-associations.md:100
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"Adiza Kumato\" }\n"
"\n"
"    factory :user_with_posts do\n"
"      transient do\n"
"        posts_count { 5 }\n"
"      end\n"
"\n"
"      posts do\n"
"        Array.new(posts_count) { association(:post) }\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create(:user_with_posts).posts.length # 5\n"
"create(:user_with_posts, posts_count: 15).posts.length # 15\n"
"build(:user_with_posts, posts_count: 15).posts.length # 15\n"
"build_stubbed(:user_with_posts, posts_count: 15).posts.length # 15\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :post do\n"
"    title { \"Through the Looking Glass\" }\n"
"    user\n"
"  end\n"
"\n"
"  factory :user do\n"
"    name { \"Adiza Kumato\" }\n"
"\n"
"    factory :user_with_posts do\n"
"      transient do\n"
"        posts_count { 5 }\n"
"      end\n"
"\n"
"      posts do\n"
"        Array.new(posts_count) { association(:post) }\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create(:user_with_posts).posts.length # 5\n"
"create(:user_with_posts, posts_count: 15).posts.length # 15\n"
"build(:user_with_posts, posts_count: 15).posts.length # 15\n"
"build_stubbed(:user_with_posts, posts_count: 15).posts.length # 15\n"

#. type: Title #
#: ../docs/src/cookbook/interconnected-associations.md:1
#, no-wrap
msgid "Interconnected associations"
msgstr "相互接続関連"

#. type: Plain text
#: ../docs/src/cookbook/interconnected-associations.md:7
msgid ""
"There are limitless ways objects might be interconnected, and factory\\_bot "
"may not always be suited to handle those relationships. In some cases it "
"makes sense to use factory\\_bot to build each individual object, and then "
"to write helper methods in plain Ruby to tie those objects together."
msgstr ""
"オブジェクトが相互接続する方法は際限なくあり、factory\\_botは常にそうした関係"
"を扱うのに向いていないかもしれません。\n"
"factory\\_botを使って個々のオブジェクトを構築し、素のRubyで補助メソッドを書い"
"てこうしたオブジェクトを結び付けるのが理に適っている場合があります。"

#. type: Plain text
#: ../docs/src/cookbook/interconnected-associations.md:10
msgid ""
"That said, some more complex, interconnected relationships can be built in "
"factory\\_bot using inline associations with reference to the `instance` "
"being built."
msgstr ""
"つまり、より複雑で相互接続された関係は、行内関連と構築される`instance`への参"
"照とを使ってfactory\\_botで構築できるということです。"

#. type: Plain text
#: ../docs/src/cookbook/interconnected-associations.md:13
msgid ""
"Let's say your models look like this, where an associated `Student` and "
"`Profile` should both belong to the same `School`:"
msgstr ""
"モデルが以下のようなものであるとします。\n"
"ここで紐付く`Student`と`Profile`は両方とも同じ`School`に属します。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/interconnected-associations.md:14
#, no-wrap
msgid ""
"class Student < ApplicationRecord\n"
"  belongs_to :school\n"
"  has_one :profile\n"
"end\n"
"\n"
"class Profile < ApplicationRecord\n"
"  belongs_to :school\n"
"  belongs_to :student\n"
"end\n"
"\n"
"class School < ApplicationRecord\n"
"  has_many :students\n"
"  has_many :profiles\n"
"end\n"
msgstr ""
"class Student < ApplicationRecord\n"
"  belongs_to :school\n"
"  has_one :profile\n"
"end\n"
"\n"
"class Profile < ApplicationRecord\n"
"  belongs_to :school\n"
"  belongs_to :student\n"
"end\n"
"\n"
"class School < ApplicationRecord\n"
"  has_many :students\n"
"  has_many :profiles\n"
"end\n"

#. type: Plain text
#: ../docs/src/cookbook/interconnected-associations.md:33
msgid ""
"We can ensure the student and profile are connected to each other and to the "
"same school with a factory like this:"
msgstr ""
"生徒とプロファイルが相互に接続し、同じ学校にあることを以下のようなファクトリ"
"で確かめられます。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/interconnected-associations.md:34
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :student do\n"
"    school\n"
"    profile { association :profile, student: instance, school: school }\n"
"  end\n"
"\n"
"  factory :profile do\n"
"    school\n"
"    student { association :student, profile: instance, school: school }\n"
"  end\n"
"\n"
"  factory :school\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :student do\n"
"    school\n"
"    profile { association :profile, student: instance, school: school }\n"
"  end\n"
"\n"
"  factory :profile do\n"
"    school\n"
"    student { association :student, profile: instance, school: school }\n"
"  end\n"
"\n"
"  factory :school\n"
"end\n"

#. type: Plain text
#: ../docs/src/cookbook/interconnected-associations.md:52
msgid ""
"Note that this approach works with `build`, `build_stubbed`, and `create`, "
"but the associations will return `nil` when using `attributes_for`."
msgstr ""
"なおこの方法は`build`や`build_stubbed`や`create`で上手くいきます。\n"
"ただし`attributes_for`を使うと紐付けから`nil`が返ります。"

#. type: Plain text
#: ../docs/src/cookbook/interconnected-associations.md:55
msgid ""
"Also, note that if you assign any attributes inside a custom "
"`initialize_with` (e.g. `initialize_with { new(**attributes) }`), those "
"attributes should not refer to `instance`, since it will be `nil`."
msgstr ""
"また、独自の`initialize_with`内で属性を代入したとき（例えば`initialize_with "
"{ new(**attributes) }`）、これらの属性は`instance`を参照すべきではないことに"
"も注意してください。\n"
"`nil`になるからです。"

#. type: Title #
#: ../docs/src/cookbook/polymorphic-associations.md:1
#, no-wrap
msgid "Polymorphic associations"
msgstr "多相関連"

#. type: Plain text
#: ../docs/src/cookbook/polymorphic-associations.md:4
msgid "Polymorphic associations can be handled with traits:"
msgstr "多相関連はトレイトで制御できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/polymorphic-associations.md:5
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :video\n"
"  factory :photo\n"
"\n"
"  factory :comment do\n"
"    for_photo # default to the :for_photo trait if none is specified\n"
"\n"
"    trait :for_video do\n"
"      association :commentable, factory: :video\n"
"    end\n"
"\n"
"    trait :for_photo do\n"
"      association :commentable, factory: :photo\n"
"    end\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :video\n"
"  factory :photo\n"
"\n"
"  factory :comment do\n"
"    for_photo # 何も指定されなければ既定で:for_photoトレイトです。\n"
"\n"
"    trait :for_video do\n"
"      association :commentable, factory: :video\n"
"    end\n"
"\n"
"    trait :for_photo do\n"
"      association :commentable, factory: :photo\n"
"    end\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/cookbook/polymorphic-associations.md:25
msgid "This allows us to do:"
msgstr "こうして以下とできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/cookbook/polymorphic-associations.md:26
#, no-wrap
msgid ""
"create(:comment)\n"
"create(:comment, :for_video)\n"
"create(:comment, :for_photo)\n"
msgstr ""
"create(:comment)\n"
"create(:comment, :for_video)\n"
"create(:comment, :for_photo)\n"

#. type: Title #
#: ../docs/src/custom-callbacks/summary.md:1
#, no-wrap
msgid "Custom Callbacks"
msgstr "独自コールバック"

#. type: Plain text
#: ../docs/src/custom-callbacks/summary.md:4
msgid "Custom callbacks can be defined if you're using custom strategies:"
msgstr "独自の戦略を使いたいとき、独自コールバックを定義できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-callbacks/summary.md:5
#, no-wrap
msgid ""
"class JsonStrategy\n"
"  def initialize\n"
"    @strategy = FactoryBot.strategy_by_name(:create).new\n"
"  end\n"
"\n"
"  delegate :association, to: :@strategy\n"
"\n"
"  def result(evaluation)\n"
"    result = @strategy.result(evaluation)\n"
"    evaluation.notify(:before_json, result)\n"
"\n"
"    result.to_json.tap do |json|\n"
"      evaluation.notify(:after_json, json)\n"
"      evaluation.notify(:make_json_awesome, json)\n"
"    end\n"
"  end\n"
"\n"
"  def to_sym\n"
"    :json\n"
"  end\n"
"end\n"
"\n"
"FactoryBot.register_strategy(:json, JsonStrategy)\n"
"\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    before(:json)                { |user| do_something_to(user) }\n"
"    after(:json)                 { |user_json| do_something_to(user_json) }\n"
"    callback(:make_json_awesome) { |user_json| do_something_to(user_json) }\n"
"  end\n"
"end\n"
msgstr ""
"class JsonStrategy\n"
"  def initialize\n"
"    @strategy = FactoryBot.strategy_by_name(:create).new\n"
"  end\n"
"\n"
"  delegate :association, to: :@strategy\n"
"\n"
"  def result(evaluation)\n"
"    result = @strategy.result(evaluation)\n"
"    evaluation.notify(:before_json, result)\n"
"\n"
"    result.to_json.tap do |json|\n"
"      evaluation.notify(:after_json, json)\n"
"      evaluation.notify(:make_json_awesome, json)\n"
"    end\n"
"  end\n"
"\n"
"  def to_sym\n"
"    :json\n"
"  end\n"
"end\n"
"\n"
"FactoryBot.register_strategy(:json, JsonStrategy)\n"
"\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    before(:json)                { |user| do_something_to(user) }\n"
"    after(:json)                 { |user_json| do_something_to(user_json) }\n"
"    callback(:make_json_awesome) { |user_json| do_something_to(user_json) }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/custom-construction/summary.md:1
#, no-wrap
msgid "Custom Construction"
msgstr "独自の構築"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:7
msgid ""
"If you want to use factory\\_bot to construct an object where some "
"attributes are passed to `initialize` or if you want to do something other "
"than simply calling `new` on your build class, you can override the default "
"behavior by defining `initialize_with` on your factory. Example:"
msgstr ""
"factory\\_botを使って、`initialize`に渡される属性があるオブジェクトを構築した"
"いときや、クラスを構築する上で単に`new`を呼ぶ以上のことをしたいときは、ファク"
"トリに`initialize_with`を定義して既定の挙動を上塗りできます。\n"
"例えば以下です。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-construction/summary.md:8
#, no-wrap
msgid ""
"# user.rb\n"
"class User\n"
"  attr_accessor :name, :email\n"
"\n"
"  def initialize(name)\n"
"    @name = name\n"
"  end\n"
"end\n"
"\n"
"# factories.rb\n"
"sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"\n"
"factory :user do\n"
"  name { \"Jane Doe\" }\n"
"  email\n"
"\n"
"  initialize_with { new(name) }\n"
"end\n"
"\n"
"build(:user).name # Jane Doe\n"
msgstr ""
"# user.rb\n"
"class User\n"
"  attr_accessor :name, :email\n"
"\n"
"  def initialize(name)\n"
"    @name = name\n"
"  end\n"
"end\n"
"\n"
"# factories.rb\n"
"sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"\n"
"factory :user do\n"
"  name { \"Jane Doe\" }\n"
"  email\n"
"\n"
"  initialize_with { new(name) }\n"
"end\n"
"\n"
"build(:user).name # Jane Doe\n"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:37
msgid ""
"Although factory\\_bot is written to work with ActiveRecord out of the box, "
"it can also work with any Ruby class. For maximum compatibility with "
"ActiveRecord, the default initializer builds all instances by calling `new` "
"on your build class without any arguments. It then calls attribute writer "
"methods to assign all the attribute values. While that works fine for "
"ActiveRecord, it actually doesn't work for almost any other Ruby class."
msgstr ""
"factory\\_botはActiveRecordで飛び抜けて上手く書けるようになっていますが、どん"
"なRubyクラスでも動作できます。\n"
"ActiveRecordと最大限の互換性があるよう、既定の初期化器はクラスを構築するのに"
"実引数なしで`new`を読んで全てのインスタンスを構築します。\n"
"それから属性の書込みメソッドを呼んで全ての属性値を代入します。\n"
"ActiveRecordでは上手く動きますが、他のRubyのクラスのほとんどは実際にはうまく"
"いきません。"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:39
msgid "You can override the initializer in order to:"
msgstr "以下の目的で初期化器を上塗りできます。"

#. type: Bullet: '* '
#: ../docs/src/custom-construction/summary.md:43
msgid "Build non-ActiveRecord objects that require arguments to `initialize`"
msgstr "`initialize`に実引数が必須の非ActiveRecordオブジェクトを構築する。"

#. type: Bullet: '* '
#: ../docs/src/custom-construction/summary.md:43
msgid "Use a method other than `new` to instantiate the instance"
msgstr "`new`ではないメソッドを使ってインスタンスをインスタンス化する。"

#. type: Bullet: '* '
#: ../docs/src/custom-construction/summary.md:43
msgid "Do wild things like decorate the instance after it's built"
msgstr "構築された後にインスタンスを修飾するような雑なことをする。"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:47
msgid ""
"When using `initialize_with`, you don't have to declare the class itself "
"when calling `new`; however, any other class methods you want to call will "
"have to be called on the class explicitly."
msgstr ""
"`initialize_with`を使うとき、`new`を呼ぶときにクラス自体を宣言する必要はあり"
"ません。\n"
"しかし呼びたいその他のクラスメソッドは明示的にクラスに対して呼ばなければなり"
"ません。"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:49
msgid "For example:"
msgstr "例は以下です。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-construction/summary.md:50
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"John Doe\" }\n"
"\n"
"  initialize_with { User.build_with_name(name) }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  name { \"John Doe\" }\n"
"\n"
"  initialize_with { User.build_with_name(name) }\n"
"end\n"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:60
msgid ""
"You can also access all public attributes within the `initialize_with` block "
"by calling `attributes`:"
msgstr ""
"`attributes`を呼んで`initialize_with`ブロック内で全ての公の属性を使うこともで"
"きます。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-construction/summary.md:61
#, no-wrap
msgid ""
"factory :user do\n"
"  transient do\n"
"    comments_count { 5 }\n"
"  end\n"
"\n"
"  name \"John Doe\"\n"
"\n"
"  initialize_with { new(**attributes) }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  transient do\n"
"    comments_count { 5 }\n"
"  end\n"
"\n"
"  name \"John Doe\"\n"
"\n"
"  initialize_with { new(**attributes) }\n"
"end\n"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:76
msgid ""
"This will build a hash of all attributes to be passed to `new`. It won't "
"include transient attributes, but everything else defined in the factory "
"will be passed (associations, evaluated sequences, etc.)"
msgstr ""
"こうすると`new`に渡される全ての属性のハッシュを構築します。\n"
"一過的属性は含まれませんが、ファクトリで定義されたその他全て（関連、評価され"
"た系列など）が渡されます。"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:79
msgid ""
"You can define `initialize_with` for all factories by including it in the "
"`FactoryBot.define` block:"
msgstr ""
"`FactoryBot.define`ブロック内に含めると全てのファクトリに`initialize_with`を"
"定義できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-construction/summary.md:80
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  initialize_with { new(\"Awesome first argument\") }\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  initialize_with { new(\"Awesome first argument\") }\n"
"end\n"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:89
msgid ""
"When using `initialize_with`, attributes accessed from within the "
"`initialize_with` block are assigned *only* in the constructor; this equates "
"to roughly the following code:"
msgstr ""
"`initialize_with`を使うとき、`initialize_with`ブロック内で使う属性は構築子で*"
"のみ*代入されます。\n"
"これは以下のコードと大まかに同じです。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-construction/summary.md:90
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    initialize_with { new(name) }\n"
"\n"
"    name { 'value' }\n"
"  end\n"
"end\n"
"\n"
"build(:user)\n"
"# runs\n"
"User.new('value')\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    initialize_with { new(name) }\n"
"\n"
"    name { 'value' }\n"
"  end\n"
"end\n"
"\n"
"build(:user)\n"
"# ……とすると以下が実行されます。\n"
"User.new('value')\n"

#. type: Plain text
#: ../docs/src/custom-construction/summary.md:106
msgid ""
"This prevents duplicate assignment; in versions of factory\\_bot before 4.0, "
"it would run this:"
msgstr ""
"これは重複する代入を防止しています。\n"
"4.0より前のfactory\\_botでは以下が走っていました。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-construction/summary.md:107
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    initialize_with { new(name) }\n"
"\n"
"    name { 'value' }\n"
"  end\n"
"end\n"
"\n"
"build(:user)\n"
"# runs\n"
"user = User.new('value')\n"
"user.name = 'value'\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    initialize_with { new(name) }\n"
"\n"
"    name { 'value' }\n"
"  end\n"
"end\n"
"\n"
"build(:user)\n"
"# ……とすると以下が実行されます。\n"
"user = User.new('value')\n"
"user.name = 'value'\n"

#. type: Title #
#: ../docs/src/custom-methods-to-persist-objects/summary.md:1
#, no-wrap
msgid "Custom Methods to Persist Objects"
msgstr "オブジェクトを永続化するための独自メソッド"

#. type: Plain text
#: ../docs/src/custom-methods-to-persist-objects/summary.md:6
msgid ""
"By default, creating a record will call `save!` on the instance; since this "
"may not always be ideal, you can override that behavior by defining "
"`to_create` on the factory:"
msgstr ""
"既定で、レコードを作成するとインスタンスに`save!`を呼びます。\n"
"これは常に最適ではないことがあるため、ファクトリに`to_create`を定義して挙動を"
"上塗りできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-methods-to-persist-objects/summary.md:7
#, no-wrap
msgid ""
"factory :different_orm_model do\n"
"  to_create { |instance| instance.persist! }\n"
"end\n"
msgstr ""
"factory :different_orm_model do\n"
"  to_create { |instance| instance.persist! }\n"
"end\n"

#. type: Plain text
#: ../docs/src/custom-methods-to-persist-objects/summary.md:15
msgid ""
"To disable the persistence method altogether on create, you can "
"`skip_create` for that factory:"
msgstr ""
"作成で永続化のメソッドも一緒に無効化するには、ファクトリで`skip_create`するこ"
"とができます。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-methods-to-persist-objects/summary.md:16
#, no-wrap
msgid ""
"factory :user_without_database do\n"
"  skip_create\n"
"end\n"
msgstr ""
"factory :user_without_database do\n"
"  skip_create\n"
"end\n"

#. type: Plain text
#: ../docs/src/custom-methods-to-persist-objects/summary.md:24
msgid ""
"To override `to_create` for all factories, define it within the `FactoryBot."
"define` block:"
msgstr ""
"全てのファクトリで`to_create`を上塗りするには`FactoryBot.define`ブロック内で"
"定義します。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-methods-to-persist-objects/summary.md:25
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  to_create { |instance| instance.persist! }\n"
"\n"
"\n"
"  factory :user do\n"
"    name { \"John Doe\" }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  to_create { |instance| instance.persist! }\n"
"\n"
"\n"
"  factory :user do\n"
"    name { \"John Doe\" }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/custom-strategies/summary.md:1
#, no-wrap
msgid "Custom Strategies"
msgstr "独自の戦略"

#. type: Plain text
#: ../docs/src/custom-strategies/summary.md:5
msgid ""
"There are times where you may want to extend behavior of factory\\_bot by "
"adding a custom build strategy."
msgstr ""
"独自の構築の戦略を加えてfactory\\_botの挙動を拡張したいときがあります。"

#. type: Plain text
#: ../docs/src/custom-strategies/summary.md:13
msgid ""
"Strategies define two methods: `association` and `result`. `association` "
"receives a `FactoryBot::FactoryRunner` instance, upon which you can call "
"`run`, overriding the strategy if you want. The second method, `result`, "
"receives a `FactoryBot::Evaluation` instance. It provides a way to trigger "
"callbacks (with `notify`), `object` or `hash` (to get the result instance or "
"a hash based on the attributes defined in the factory), and `create`, which "
"executes the `to_create` callback defined on the factory."
msgstr ""
"戦略は2つのメソッド`association`及び`result`を定義します。\n"
"`association`は`FactoryBot::FactoryRunner`インスタンスを受け取ります。\n"
"このインスタンスは`run`を呼んでお好みで戦略を上塗りできます。\n"
"2つ目のメソッド`result`は`FactoryBot::Evaluation`インスタンスを受け取りま"
"す。\n"
"コールバック、`object`、`hash`（結果のインスタンスやファクトリで定義された属"
"性に基づくハッシュを得るためのもの）、`create`のきっかけとなる手段を"
"（`notify`で）を提供します。\n"
"`create`はファクトリで定義された`to_create`コールバックを実行します。"

#. type: Plain text
#: ../docs/src/custom-strategies/summary.md:16
msgid ""
"To understand how factory\\_bot uses strategies internally, it's probably "
"easiest to view the source for each of the four default strategies."
msgstr "factory\\_botで、戦略が内部で使われる仕組みを理解するには、4つの既定の戦略それぞれのソースを眺めるのが、恐らく一番簡単です。"

#. type: Plain text
#: ../docs/src/custom-strategies/summary.md:19
msgid ""
"Here's an example of composing a strategy using `FactoryBot::Strategy::"
"Create` to build a JSON representation of your model."
msgstr ""
"以下は`FactoryBot::Strategy::Create`を使ってモデルにJSON表現を構築する戦略を"
"組む例です。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-strategies/summary.md:20
#, no-wrap
msgid ""
"class JsonStrategy\n"
"  def initialize\n"
"    @strategy = FactoryBot.strategy_by_name(:create).new\n"
"  end\n"
"\n"
"  delegate :association, to: :@strategy\n"
"\n"
"  def result(evaluation)\n"
"    @strategy.result(evaluation).to_json\n"
"  end\n"
"\n"
"  def to_sym\n"
"    :json\n"
"  end\n"
"end\n"
msgstr ""
"class JsonStrategy\n"
"  def initialize\n"
"    @strategy = FactoryBot.strategy_by_name(:create).new\n"
"  end\n"
"\n"
"  delegate :association, to: :@strategy\n"
"\n"
"  def result(evaluation)\n"
"    @strategy.result(evaluation).to_json\n"
"  end\n"
"\n"
"  def to_sym\n"
"    :json\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/custom-strategies/summary.md:39
msgid "For factory\\_bot to recognize the new strategy, you can register it:"
msgstr "factory\\_botに新しい戦略を認識させるために、その戦略を登録できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-strategies/summary.md:40
#, no-wrap
msgid "FactoryBot.register_strategy(:json, JsonStrategy)\n"
msgstr "FactoryBot.register_strategy(:json, JsonStrategy)\n"

#. type: Plain text
#: ../docs/src/custom-strategies/summary.md:45
msgid "This allows you to call"
msgstr "こうして呼べるようになります。"

#. type: Fenced code block (ruby)
#: ../docs/src/custom-strategies/summary.md:46
#, no-wrap
msgid "FactoryBot.json(:user)\n"
msgstr "FactoryBot.json(:user)\n"

#. type: Plain text
#: ../docs/src/custom-strategies/summary.md:51
msgid ""
"Finally, you can override factory\\_bot's own strategies if you'd like by "
"registering a new object in place of the strategies."
msgstr ""
"最後に、戦略の代わりに新しいオブジェクトと登録することによってfactory\\_bot独"
"自の戦略を上塗りできます。"

#. type: Title #
#: ../docs/src/defining/best-practices.md:1
#: ../docs/src/inheritance/best-practices.md:1
#, no-wrap
msgid "Best practices"
msgstr "ベストプラクティス"

#. type: Plain text
#: ../docs/src/defining/best-practices.md:9
msgid ""
"It is recommended that you have one factory for each class that provides the "
"simplest set of attributes necessary to create an instance of that class. If "
"you're creating ActiveRecord objects, that means that you should only "
"provide attributes that are required through validations and that do not "
"have defaults.  Other factories can be created through inheritance to cover "
"common scenarios for each class."
msgstr ""
"お勧めは、各クラスに1つのファクトリがあるようにし、そのクラスのインスタンスを"
"作るのに必要な、最も単純な属性一式を提供することです。\n"
"ActiveRecordオブジェクトを作る場合、これが意味するのは検証を通じて求められる"
"属性のみを与え、既定値を持たせないということです。\n"
"他のファクトリは各クラスについて共通する筋書を押さえる上で継承を通じて作れま"
"す。"

#. type: Plain text
#: ../docs/src/defining/best-practices.md:10
msgid ""
"Attempting to define multiple factories with the same name will raise an "
"error."
msgstr "同じ名前で複数のファクトリを定義しようとするとエラーが投げられます。"

#. type: Title #
#: ../docs/src/defining/explicit-class.md:1
#, no-wrap
msgid "Specifying the class explicitly"
msgstr "クラスを明示的に指定"

#. type: Plain text
#: ../docs/src/defining/explicit-class.md:4
msgid "It is also possible to explicitly specify the class:"
msgstr "クラスを明示的に指定することもできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/defining/explicit-class.md:5
#, no-wrap
msgid ""
"# This will use the User class (otherwise Admin would have been guessed)\n"
"factory :admin, class: \"User\"\n"
msgstr ""
"# 以下はUserクラスを使います（こうしなければAdminが推測されていました）\n"
"factory :admin, class: \"User\"\n"

#. type: Plain text
#: ../docs/src/defining/explicit-class.md:13
msgid ""
"You can pass a constant as well, if the constant is available (note that "
"this can cause test performance problems in large Rails applications, since "
"referring to the constant will cause it to be eagerly loaded)."
msgstr ""
"定数が使えるときは定数も渡せます（なおこれは大きいRailsアプリケーションではテ"
"ストの効率性の問題を引き起こすことがあります。\n"
"定数の参照が積極読込を引き起こすためです）。"

#. type: Fenced code block (ruby)
#: ../docs/src/defining/explicit-class.md:14
#, no-wrap
msgid "factory :access_token, class: User\n"
msgstr "factory :access_token, class: User\n"

#. type: Title #
#: ../docs/src/defining/file-paths.md:1
#, no-wrap
msgid "Definition file paths"
msgstr "定義ファイルパス"

#. type: Plain text
#: ../docs/src/defining/file-paths.md:6
msgid ""
"Factories can be defined anywhere, but will be automatically loaded after "
"calling `FactoryBot.find_definitions` if factories are defined in files at "
"the following locations:"
msgstr ""
"ファクトリはどこでも定義できます。\n"
"しかしファクトリが以下の場所のファイルで定義された場合、`FactoryBot."
"find_definitions`を読んだ後に自動的に読み込まれます。"

#. type: Plain text
#: ../docs/src/defining/file-paths.md:10
#, no-wrap
msgid ""
"    test/factories.rb\n"
"    spec/factories.rb\n"
"    test/factories/*.rb\n"
"    spec/factories/*.rb\n"
msgstr ""
"    test/factories.rb\n"
"    spec/factories.rb\n"
"    test/factories/*.rb\n"
"    spec/factories/*.rb\n"

#. type: Title #
#: ../docs/src/defining/hash-attributes.md:1
#, no-wrap
msgid "Hash attributes"
msgstr "ハッシュ属性"

#. type: Plain text
#: ../docs/src/defining/hash-attributes.md:5
msgid ""
"Because of the block syntax in Ruby, defining attributes as `Hash`es (for "
"serialized/JSON columns, for example) requires two sets of curly brackets:"
msgstr ""
"Rubyのブロック構文があるため、（例えば直列化された列やJSONの列用に）属性を"
"`Hash`として定義するには、2対の波括弧が必要です。"

#. type: Fenced code block (ruby)
#: ../docs/src/defining/hash-attributes.md:6
#, no-wrap
msgid ""
"factory :program do\n"
"  configuration { { auto_resolve: false, auto_define: true } }\n"
"end\n"
msgstr ""
"factory :program do\n"
"  configuration { { auto_resolve: false, auto_define: true } }\n"
"end\n"

#. type: Plain text
#: ../docs/src/defining/hash-attributes.md:13
msgid "Alternatively you may prefer `do`/`end` syntax:"
msgstr "代えてお好みで`do`と`end`の構文にすることもできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/defining/hash-attributes.md:14
#, no-wrap
msgid ""
"factory :program do\n"
"  configuration do\n"
"    { auto_resolve: false, auto_define: true }\n"
"  end\n"
"end\n"
msgstr ""
"factory :program do\n"
"  configuration do\n"
"    { auto_resolve: false, auto_define: true }\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/defining/hash-attributes.md:27
msgid ""
"However, defining a value as a hash makes it complicated to set values "
"within the hash when constructing an object. Instead, prefer to use "
"factory\\_bot itself:"
msgstr ""
"しかし値をハッシュとして定義するとオブジェクトを構築するときにハッシュ内に値"
"を設定するのが複雑になります。\n"
"その代わりにfactory\\_bot自体を使うようにしてください。"

#. type: Fenced code block (ruby)
#: ../docs/src/defining/hash-attributes.md:28
#, no-wrap
msgid ""
"factory :program do\n"
"  configuration { attributes_for(:configuration) }\n"
"end\n"
"\n"
"factory :configuration do\n"
"  auto_resolve { false }\n"
"  auto_define { true }\n"
"end\n"
msgstr ""
"factory :program do\n"
"  configuration { attributes_for(:configuration) }\n"
"end\n"
"\n"
"factory :configuration do\n"
"  auto_resolve { false }\n"
"  auto_define { true }\n"
"end\n"

#. type: Plain text
#: ../docs/src/defining/hash-attributes.md:40
msgid "This way you can more easily set value when building:"
msgstr "この方法ではより簡単に構築の際に値を設定できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/defining/hash-attributes.md:41
#, no-wrap
msgid ""
"create(\n"
"  :program,\n"
"  configuration: attributes_for(\n"
"    :configuration,\n"
"    auto_resolve: true,\n"
"  )\n"
")\n"
msgstr ""
"create(\n"
"  :program,\n"
"  configuration: attributes_for(\n"
"    :configuration,\n"
"    auto_resolve: true,\n"
"  )\n"
")\n"

#. type: Title #
#: ../docs/src/defining/name-attributes.md:1
#, no-wrap
msgid "Factory name and attributes"
msgstr "ファクトリ名と属性"

#. type: Plain text
#: ../docs/src/defining/name-attributes.md:5
msgid ""
"Each factory has a name and a set of attributes. The name is used to guess "
"the class of the object by default:"
msgstr ""
"各ファクトリには名前と属性の一式があります。\n"
"名前は既定でオブジェクトのクラスを推測するために使われます。"

#. type: Fenced code block (ruby)
#: ../docs/src/defining/name-attributes.md:6
#, no-wrap
msgid ""
"# This will guess the User class\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    first_name { \"John\" }\n"
"    last_name  { \"Doe\" }\n"
"    admin { false }\n"
"  end\n"
"end\n"
msgstr ""
"# 以下はUserクラスを推測します。\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    first_name { \"John\" }\n"
"    last_name  { \"Doe\" }\n"
"    admin { false }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/defining/static-attributes.md:1
#, no-wrap
msgid "Static Attributes"
msgstr "静的属性"

#. type: Plain text
#: ../docs/src/defining/static-attributes.md:5
msgid ""
"Static attributes (without a block) are no longer available in factory\\_bot "
"5.  You can read more about the decision to remove them in [this blog post]"
"(https://robots.thoughtbot.com/deprecating-static-attributes-in-"
"factory_bot-4-11)."
msgstr ""
"（ブロックの無い）静的属性はfactory_bot 5では使えなくなりました。\n"
"削除する決断についての詳細は[こちらのブログの記事](https://robots.thoughtbot."
"com/deprecating-static-attributes-in-factory_bot-4-11)をお読みいただけます。"

#. type: Title #
#: ../docs/src/dependent-attributes/summary.md:1
#, no-wrap
msgid "Dependent Attributes"
msgstr "依存属性"

#. type: Plain text
#: ../docs/src/dependent-attributes/summary.md:5
msgid ""
"Attributes can be based on the values of other attributes using the context "
"that is yielded to dynamic attribute blocks:"
msgstr ""
"属性は文脈を使って他の属性の値に基づくものにできます。\n"
"属性は動的な属性ブロックに処理を譲ります。"

#. type: Fenced code block (ruby)
#: ../docs/src/dependent-attributes/summary.md:6
#, no-wrap
msgid ""
"factory :user do\n"
"  first_name { \"Joe\" }\n"
"  last_name  { \"Blow\" }\n"
"  email { \"#{first_name}.#{last_name}@example.com\".downcase }\n"
"end\n"
"\n"
"create(:user, last_name: \"Doe\").email\n"
"# => \"joe.doe@example.com\"\n"
msgstr ""
"factory :user do\n"
"  first_name { \"Joe\" }\n"
"  last_name  { \"Blow\" }\n"
"  email { \"#{first_name}.#{last_name}@example.com\".downcase }\n"
"end\n"
"\n"
"create(:user, last_name: \"Doe\").email\n"
"# => \"joe.doe@example.com\"\n"

#. type: Title #
#: ../docs/src/inheritance/assigning-parent-explicitly.md:1
#, no-wrap
msgid "Assigning parent explicitly"
msgstr "親を明示的に代入"

#. type: Plain text
#: ../docs/src/inheritance/assigning-parent-explicitly.md:4
msgid "You can also assign the parent explicitly:"
msgstr "親を明示的に代入することもできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/inheritance/assigning-parent-explicitly.md:5
#, no-wrap
msgid ""
"factory :post do\n"
"  title { \"A title\" }\n"
"end\n"
"\n"
"factory :approved_post, parent: :post do\n"
"  approved { true }\n"
"end\n"
msgstr ""
"factory :post do\n"
"  title { \"A title\" }\n"
"end\n"
"\n"
"factory :approved_post, parent: :post do\n"
"  approved { true }\n"
"end\n"

#. type: Plain text
#: ../docs/src/inheritance/best-practices.md:5
msgid ""
"As mentioned above, it's good practice to define a basic factory for each "
"class with only the attributes required to create it. Then, create more "
"specific factories that inherit from this basic parent."
msgstr ""
"前述した通り、作成に必須の属性のみを持つ各クラスの基礎的なファクトリを定義す"
"るのが良いでしょう。\n"
"それからこの基礎的な親から継承するより具体的なファクトリを作るのです。"

#. type: Title #
#: ../docs/src/inheritance/nested-factories.md:1
#, no-wrap
msgid "Nested factories"
msgstr "入れ子のファクトリ"

#. type: Plain text
#: ../docs/src/inheritance/nested-factories.md:5
msgid ""
"You can create multiple factories for the same class without repeating "
"common attributes by nesting factories:"
msgstr ""
"入れ子のファクトリでは、共通する属性を繰り返すことなく、同じクラスに対して複"
"数のファクトリを作れます。"

#. type: Fenced code block (ruby)
#: ../docs/src/inheritance/nested-factories.md:6
#, no-wrap
msgid ""
"factory :post do\n"
"  title { \"A title\" }\n"
"\n"
"  factory :approved_post do\n"
"    approved { true }\n"
"  end\n"
"end\n"
"\n"
"approved_post = create(:approved_post)\n"
"approved_post.title    # => \"A title\"\n"
"approved_post.approved # => true\n"
msgstr ""
"factory :post do\n"
"  title { \"A title\" }\n"
"\n"
"  factory :approved_post do\n"
"    approved { true }\n"
"  end\n"
"end\n"
"\n"
"approved_post = create(:approved_post)\n"
"approved_post.title    # => \"A title\"\n"
"approved_post.approved # => true\n"

#. type: Title #
#: ../docs/src/linting-factories/summary.md:1
#, no-wrap
msgid "Linting Factories"
msgstr "ファクトリのリント"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:4
msgid "factory\\_bot allows for linting known factories:"
msgstr "factory\\_botは既知のファクトリをリントできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/linting-factories/summary.md:5
#, no-wrap
msgid "FactoryBot.lint\n"
msgstr "FactoryBot.lint\n"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:13
msgid ""
"`FactoryBot.lint` creates each factory and catches any exceptions raised "
"during the creation process. `FactoryBot::InvalidFactoryError` is raised "
"with a list of factories (and corresponding exceptions) for factories which "
"could not be created."
msgstr ""
"`FactoryBot.lint`は各ファクトリを作って作成の仮定で投げられた例外を捕えま"
"す。\n"
"作成されなかったファクトリのリスト（と対応する例外）を持つ`FactoryBot::"
"InvalidFactoryError`が投げられます。"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:17
msgid ""
"Recommended usage of `FactoryBot.lint` is to run this in a separate task "
"before your test suite is executed. Running it in a `before(:suite)` will "
"negatively impact the performance of your tests when running single tests."
msgstr ""
"`FactoryBot.lint`のお勧めの使い方はテストスートが実行される前に個別のタスクで"
"これを走らせることです。\n"
"`before(:suite)`で走らせるとテスト単体を走らせるときにテストの効率に直に打撃"
"があります。"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:19
msgid "Example Rake task:"
msgstr "Rakeタスクの例は以下です。"

#. type: Fenced code block (ruby)
#: ../docs/src/linting-factories/summary.md:20
#, no-wrap
msgid ""
"# lib/tasks/factory_bot.rake\n"
"namespace :factory_bot do\n"
"  desc \"Verify that all FactoryBot factories are valid\"\n"
"  task lint: :environment do\n"
"    if Rails.env.test?\n"
"      conn = ActiveRecord::Base.connection\n"
"      conn.transaction do\n"
"        FactoryBot.lint\n"
"        raise ActiveRecord::Rollback\n"
"      end\n"
"    else\n"
"      system(\"bundle exec rake factory_bot:lint RAILS_ENV='test'\")\n"
"      fail if $?.exitstatus.nonzero?\n"
"    end\n"
"  end\n"
"end\n"
msgstr ""
"# lib/tasks/factory_bot.rake\n"
"namespace :factory_bot do\n"
"  desc \"Verify that all FactoryBot factories are valid\"\n"
"  task lint: :environment do\n"
"    if Rails.env.test?\n"
"      conn = ActiveRecord::Base.connection\n"
"      conn.transaction do\n"
"        FactoryBot.lint\n"
"        raise ActiveRecord::Rollback\n"
"      end\n"
"    else\n"
"      system(\"bundle exec rake factory_bot:lint RAILS_ENV='test'\")\n"
"      fail if $?.exitstatus.nonzero?\n"
"    end\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:42
msgid ""
"After calling `FactoryBot.lint`, you'll likely want to clear out the "
"database, as records will most likely be created. The provided example above "
"uses an SQL transaction and rollback to leave the database clean."
msgstr ""
"`FactoryBot.lint`を読んだ後、恐らくデータベースを整頓したいことでしょう。\n"
"レコードが作成されていることでしょうから。\n"
"上で与えられた例ではSQLトランザクションを使ってロールバックし、データベースが"
"綺麗なままにします。"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:44
msgid ""
"You can lint factories selectively by passing only factories you want linted:"
msgstr "リントしたいファクトリのみを選んで渡してファクトリをリントできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/linting-factories/summary.md:45
#, no-wrap
msgid ""
"factories_to_lint = FactoryBot.factories.reject do |factory|\n"
"  factory.name =~ /^old_/\n"
"end\n"
"\n"
"FactoryBot.lint factories_to_lint\n"
msgstr ""
"factories_to_lint = FactoryBot.factories.reject do |factory|\n"
"  factory.name =~ /^old_/\n"
"end\n"
"\n"
"FactoryBot.lint factories_to_lint\n"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:54
msgid "This would lint all factories that aren't prefixed with `old_`."
msgstr "こうすると`old_`が接頭辞にない全てのファクトリがリントされます。"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:58
msgid ""
"Traits can also be linted. This option verifies that each and every trait of "
"a factory generates a valid object on its own. This is turned on by passing "
"`traits: true` to the `lint` method:"
msgstr ""
"トレイトもリントされます。\n"
"このオプションは各ファクトリの全トレイトが有効なオブジェクトを生成することを"
"自動で検証します。\n"
"これは`lint`メソッドに`traits: true`を渡すと有効になります。"

#. type: Fenced code block (ruby)
#: ../docs/src/linting-factories/summary.md:59
#, no-wrap
msgid "FactoryBot.lint traits: true\n"
msgstr "FactoryBot.lint traits: true\n"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:64
msgid "This can also be combined with other arguments:"
msgstr "これは他の実引数とも組み合わせられます。"

#. type: Fenced code block (ruby)
#: ../docs/src/linting-factories/summary.md:65
#, no-wrap
msgid "FactoryBot.lint factories_to_lint, traits: true\n"
msgstr "FactoryBot.lint factories_to_lint, traits: true\n"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:70
msgid "You can also specify the strategy used for linting:"
msgstr "リントに使われる戦略を指定することもできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/linting-factories/summary.md:71
#, no-wrap
msgid "FactoryBot.lint strategy: :build\n"
msgstr "FactoryBot.lint strategy: :build\n"

#. type: Plain text
#: ../docs/src/linting-factories/summary.md:77
msgid ""
"Verbose linting will include full backtraces for each error, which can be "
"helpful for debugging:"
msgstr ""
"冗長なリントは各エラーに完全なバックトレースを含めます。\n"
"デバッグで役に立つことがあります。"

#. type: Fenced code block (ruby)
#: ../docs/src/linting-factories/summary.md:78
#, no-wrap
msgid "FactoryBot.lint verbose: true\n"
msgstr "FactoryBot.lint verbose: true\n"

#. type: Title #
#: ../docs/src/method-name-reserved-word-attributes/summary.md:1
#, no-wrap
msgid "Method Name / Reserved Word Attributes"
msgstr "メソッド名と予約語の属性"

#. type: Plain text
#: ../docs/src/method-name-reserved-word-attributes/summary.md:7
msgid ""
"If your attributes conflict with existing methods or reserved words (all "
"methods in the [DefinitionProxy](https://github.com/thoughtbot/factory_bot/"
"blob/main/lib/factory_bot/definition_proxy.rb)  class) you can define them "
"with `add_attribute`."
msgstr ""
"属性が既存のメソッドや予約語（[DefinitionProxy](https://github.com/"
"thoughtbot/factory_bot/blob/main/lib/factory_bot/definition_proxy.rb)内の全メ"
"ソッド）と競合するとき、`add_attribute`で定義できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/method-name-reserved-word-attributes/summary.md:8
#, no-wrap
msgid ""
"factory :dna do\n"
"  add_attribute(:sequence) { 'GATTACA' }\n"
"end\n"
"\n"
"factory :payment do\n"
"  add_attribute(:method) { 'paypal' }\n"
"end\n"
msgstr ""
"factory :dna do\n"
"  add_attribute(:sequence) { 'GATTACA' }\n"
"end\n"
"\n"
"factory :payment do\n"
"  add_attribute(:method) { 'paypal' }\n"
"end\n"

#. type: Title #
#: ../docs/src/modifying-factories/summary.md:1
#, no-wrap
msgid "Modifying factories"
msgstr "ファクトリの変更"

#. type: Plain text
#: ../docs/src/modifying-factories/summary.md:6
msgid ""
"If you're given a set of factories (say, from a gem developer) but want to "
"change them to fit into your application better, you can modify that factory "
"instead of creating a child factory and adding attributes there."
msgstr ""
"ファクトリ一式が与えられているものの（gemの開発者からとしましょう）、アプリ"
"ケーションにもっと合うように代えたいとき、子ファクトリを作ってそこに属性を加"
"える代わりに、ファクトリを変更できます。"

#. type: Plain text
#: ../docs/src/modifying-factories/summary.md:8
msgid "If a gem were to give you a User factory:"
msgstr "gemが以下のようにUserファクトリを与えているとします。"

#. type: Fenced code block (ruby)
#: ../docs/src/modifying-factories/summary.md:9
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    full_name { \"John Doe\" }\n"
"    sequence(:username) { |n| \"user#{n}\" }\n"
"    password { \"password\" }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    full_name { \"John Doe\" }\n"
"    sequence(:username) { |n| \"user#{n}\" }\n"
"    password { \"password\" }\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/modifying-factories/summary.md:20
msgid "Instead of creating a child factory that added additional attributes:"
msgstr "追加の属性を加える子ファクトリを作るとすると以下になります。"

#. type: Fenced code block (ruby)
#: ../docs/src/modifying-factories/summary.md:21
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :application_user, parent: :user do\n"
"    full_name { \"Jane Doe\" }\n"
"    date_of_birth { 21.years.ago }\n"
"    health { 90 }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :application_user, parent: :user do\n"
"    full_name { \"Jane Doe\" }\n"
"    date_of_birth { 21.years.ago }\n"
"    health { 90 }\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/modifying-factories/summary.md:32
msgid "You could modify that factory instead."
msgstr "その代わりとしてファクトリを変更できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/modifying-factories/summary.md:33
#, no-wrap
msgid ""
"FactoryBot.modify do\n"
"  factory :user do\n"
"    full_name { \"Jane Doe\" }\n"
"    date_of_birth { 21.years.ago }\n"
"    health { 90 }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.modify do\n"
"  factory :user do\n"
"    full_name { \"Jane Doe\" }\n"
"    date_of_birth { 21.years.ago }\n"
"    health { 90 }\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/modifying-factories/summary.md:44
msgid ""
"When modifying a factory, you can change any of the attributes you want "
"(aside from callbacks)."
msgstr ""
"ファクトリを変更するとき、どんな属性も（コールバックを除いて）お好みで代えら"
"れます。"

#. type: Plain text
#: ../docs/src/modifying-factories/summary.md:47
msgid ""
"`FactoryBot.modify` must be called outside of a `FactoryBot.define` block as "
"it operates on factories differently."
msgstr ""
"`FactoryBot.modify`は`FactoryBot.define`の外側で呼ばなければなりません。\n"
"ファクトリを違った風に操作するからです。"

#. type: Plain text
#: ../docs/src/modifying-factories/summary.md:52
msgid ""
"A caveat: you can only modify factories (not sequences or traits), and "
"callbacks *still compound as they normally would*. So, if the factory you're "
"modifying defines an `after(:create)` callback, you defining an `after(:"
"create)` won't override it, it will instead be run after the first callback."
msgstr ""
"注意点：ファクトリのみ変更でき（系列やトレイトはできません）、コールバックは*"
"通常のものと同様に付属したまま*です。\n"
"そのため、変更しているファクトリで`after(:create)`コールバックを定義すると"
"き、`after(:create)`を定義しても上塗りされません。\n"
"最初のコールバックの後に実行されます。"

#. type: Title #
#: ../docs/src/rails-preloaders-and-rspec/summary.md:1
#, no-wrap
msgid "Rails Preloaders and RSpec"
msgstr "Railsの事前読込器とRSpec"

#. type: Plain text
#: ../docs/src/rails-preloaders-and-rspec/summary.md:6
msgid ""
"When running RSpec with a Rails preloader such as `spring` or `zeus`, it's "
"possible to encounter an `ActiveRecord::AssociationTypeMismatch` error when "
"creating a factory with associations, as below:"
msgstr ""
"RSpecを`spring`や`zeus`といったRailsの事前読込器付きで走らせるとき、関連付き"
"のファクトリを作るときに`ActiveRecord::AssociationTypeMismatch`エラーに遭うか"
"もしれません。\n"
"以下のような感じです。"

#. type: Fenced code block (ruby)
#: ../docs/src/rails-preloaders-and-rspec/summary.md:7
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :united_states, class: \"Location\" do\n"
"    name { 'United States' }\n"
"    association :location_group, factory: :north_america\n"
"  end\n"
"\n"
"  factory :north_america, class: \"LocationGroup\" do\n"
"    name { 'North America' }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :united_states, class: \"Location\" do\n"
"    name { 'United States' }\n"
"    association :location_group, factory: :north_america\n"
"  end\n"
"\n"
"  factory :north_america, class: \"LocationGroup\" do\n"
"    name { 'North America' }\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/rails-preloaders-and-rspec/summary.md:21
msgid "The error occurs during the run of the test suite:"
msgstr "エラーは、テストスートを走らせるときに起こります。"

#. type: Fenced code block
#: ../docs/src/rails-preloaders-and-rspec/summary.md:22
#, no-wrap
msgid ""
"Failure/Error: united_states = create(:united_states)\n"
"ActiveRecord::AssociationTypeMismatch:\n"
"  LocationGroup(#70251250797320) expected, got LocationGroup(#70251200725840)\n"
msgstr ""
"Failure/Error: united_states = create(:united_states)\n"
"ActiveRecord::AssociationTypeMismatch:\n"
"  LocationGroup(#70251250797320) expected, got LocationGroup(#70251200725840)\n"

#. type: Plain text
#: ../docs/src/rails-preloaders-and-rspec/summary.md:30
msgid ""
"The two possible solutions are to either run the suite without the "
"preloader, or to add `FactoryBot.reload` to the RSpec configuration, like so:"
msgstr ""
"2つの解決策が考えられます。\n"
"1つはテストスートを事前読込器無しで走らせることです。\n"
"もう1つはRSpecの構成に`FactoryBot.reload`を追加することです。\n"
"以下のような感じです。"

#. type: Fenced code block (ruby)
#: ../docs/src/rails-preloaders-and-rspec/summary.md:31
#, no-wrap
msgid ""
"RSpec.configure do |config|\n"
"  config.before(:suite) { FactoryBot.reload }\n"
"end\n"
msgstr ""
"RSpec.configure do |config|\n"
"  config.before(:suite) { FactoryBot.reload }\n"
"end\n"

#. type: Title #
#: ../docs/src/ref/add_attribute.md:1
#, no-wrap
msgid "add_attribute"
msgstr "add_attribute"

#. type: Plain text
#: ../docs/src/ref/add_attribute.md:5
msgid ""
"Within a factory definition, the `add_attribute` method defines a key/value "
"pair that will be set when the object is built."
msgstr ""
"ファクトリの定義の中では、`add_attribute`メソッドで、オブジェクトが構築される"
"ときに設定されるキーバリュー対を定義できます。"

#. type: Plain text
#: ../docs/src/ref/add_attribute.md:9
msgid ""
"The `add_attribute` method takes two arguments: a name (Symbol or String) "
"and a block. This block is called each time this object is constructed. The "
"block is not called when the attribute is overriden by a build strategy."
msgstr ""
"`add_attribute`メソッドは、名前（SymbolまたはString）とブロックの2つの実引数"
"を取ります。\n"
"ブロックはこのオブジェクトが構築される度に呼ばれます。\n"
"ブロックは属性が構築戦略で上塗りされるときは呼ばれません。"

#. type: Plain text
#: ../docs/src/ref/add_attribute.md:11
msgid ""
"Assignment is done by calling the Ruby attribute setter. For example, given"
msgstr ""
"代入ではRubyの属性セッターを呼びます。\n"
"例えば以下があるとします。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/add_attribute.md:12
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    add_attribute(:name) { \"Acid Burn\" }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :user do\n"
"    add_attribute(:name) { \"Acid Burn\" }\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/ref/add_attribute.md:21
msgid "This will use the `#name=` setter:"
msgstr "このとき`#name=`セッターが使われます。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/add_attribute.md:22
#, no-wrap
msgid ""
"user = User.new\n"
"user.name = \"Acid Burn\"\n"
msgstr ""
"user = User.new\n"
"user.name = \"Acid Burn\"\n"

#. type: Plain text
#: ../docs/src/ref/add_attribute.md:27
msgid "Also see [method_missing](method_missing.html) for a shorthand."
msgstr ""
"早道については[method_missing](method_missing.html)も参照してください。"

#. type: Title #
#: ../docs/src/ref/association.md:1
#, no-wrap
msgid "association"
msgstr "関連"

#. type: Plain text
#: ../docs/src/ref/association.md:6
msgid ""
"Within a factory block, use the `association` method to always make an "
"additional object alongside this one. This name best makes sense within the "
"context of ActiveRecord."
msgstr ""
"ファクトリブロック内で`association`を使うと、このオブジェクトに隣合うオブジェ"
"クトが追加で作られます。\n"
"この名前は、ActiveRecordの文脈だと一番わかりやすいでしょう。"

#. type: Plain text
#: ../docs/src/ref/association.md:8
msgid "The `association` method takes a mandatory name and optional options."
msgstr "`association`メソッドは必須の名前と省略できるオプションを取ります。"

#. type: Plain text
#: ../docs/src/ref/association.md:12
msgid ""
"The options are zero or more trait names (Symbols), followed by a hash of "
"attribute overrides. When constructing this association, factory\\_bot uses "
"the trait and attribute overrides given."
msgstr ""
"オプションは0個以上のトレイト名 (Symbol) とそれに続く属性の上塗りのハッシュで"
"す。\n"
"この関連を構築するとき、factory\\_botはトレイトと与えられた属性の上塗りを使い"
"ます。"

#. type: Plain text
#: ../docs/src/ref/association.md:15
msgid ""
"See [method_missing](method_missing.html) for a shorthand. See [build "
"strategies](build-strategies.html) for an explanation of how each build "
"strategy handles associations."
msgstr ""
"早道については[method_missing](method_missing.html)を参照してください。\n"
"各構築戦略の関連の扱いについての説明は[構築戦略](build-strategies.html)を参照"
"してください。"

#. type: Title #
#: ../docs/src/ref/build-and-create.md:1
#, no-wrap
msgid "skip_create, to_create, and initialize_with"
msgstr "skip_createとto_create、そしてinitialize_with"

#. type: Plain text
#: ../docs/src/ref/build-and-create.md:5
msgid ""
"The `skip_create`, `to_create`, and `initialize_with` methods control how "
"factory\\_bot interacts with the [build strategies](build-strategies.html)."
msgstr "`skip_create`メソッドと`to_create`メソッドと`initialize_with`メソッドは、factory\\_botによる[構築戦略](build-strategies.html)とのやり取りの仕方を制御します。"

#. type: Plain text
#: ../docs/src/ref/build-and-create.md:9
msgid ""
"These methods can be called within a `factory` definition block, to scope "
"their effects to just that factory; or within `FactoryBot.define`, to affect "
"global change."
msgstr ""
"これらのメソッドは`factory`定義ブロック内で呼べます。\n"
"作用はそのファクトリに留まります。\n"
"`FactoryBot.define`内にすると大域的な変更として作用します。"

#. type: Title ##
#: ../docs/src/ref/build-and-create.md:10
#, no-wrap
msgid "initialize_with"
msgstr "initialize_with"

#. type: Plain text
#: ../docs/src/ref/build-and-create.md:15
msgid ""
"The `initialize_with` method takes a block and returns an instance of the "
"factory's class. It has access to the `attributes` method, which is a hash "
"of all the fields and values for the object."
msgstr ""
"`initialize_with`メソッドはブロックを取り、ファクトリのクラスのインスタンスを"
"返します。\n"
"`attributes`メソッドを使うことができます。\n"
"このメソッドはオブジェクトの全てのフィールドと値からなるハッシュです。"

#. type: Plain text
#: ../docs/src/ref/build-and-create.md:17
#: ../docs/src/ref/build-and-create.md:32
msgid "The default definition is:"
msgstr "既定の定義は以下です。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/build-and-create.md:18
#, no-wrap
msgid "initialize_with { new }\n"
msgstr "initialize_with { new }\n"

#. type: Title ##
#: ../docs/src/ref/build-and-create.md:22
#, no-wrap
msgid "to_create"
msgstr "to_create"

#. type: Plain text
#: ../docs/src/ref/build-and-create.md:28
msgid ""
"The `to_create` method lets you control the `FactoryBot.create` strategy. "
"This method takes a block which takes the object as constructed by "
"`initialize_with`, and the factory\\_bot context. The context has additional "
"data from any [`transient`] blocks."
msgstr ""
"`to_create`メソッドは`FactoryBot.create`戦略を制御します。\n"
"このメソッドは`initialize_with`で構築されたオブジェクトとfactory\\_botの文脈"
"を取るブロックを取ります。\n"
"文脈には[`transient`]ブロックからの追加のデータがあります。"

#. type: Link reference
#: ../docs/src/ref/build-and-create.md:29
#, no-wrap
msgid "[`transient`]: transient.html"
msgstr "[`transient`]: transient.html"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/build-and-create.md:33
#, no-wrap
msgid "to_create { |obj, context| obj.save! }\n"
msgstr "to_create { |obj, context| obj.save! }\n"

#. type: Plain text
#: ../docs/src/ref/build-and-create.md:39
msgid ""
"The `skip_create` method is a shorthand for turning `to_create` into a no-"
"op.  This allows you to use the `create` strategy as a synonym for `build`, "
"except you additionally get any `create` hooks."
msgstr ""
"`skip_create`メソッドは`to_create`を何もしないように変える早道です。\n"
"これにより`create`戦略を`build`の同意語として使えます。\n"
"ただし`create`フックは追加で掛かっています。"

#. type: Title #
#: ../docs/src/ref/define.md:1
#, no-wrap
msgid "FactoryBot.define"
msgstr "FactoryBot.define"

#. type: Plain text
#: ../docs/src/ref/define.md:6
msgid ""
"Each file loaded by factory\\_bot is expected to call `FactoryBot.define` "
"with a block. The block is evaluated within an instance of `FactoryBot::"
"Syntax::Default::DSL`, giving access to `factory`, `sequence`, `trait`, and "
"other methods."
msgstr ""
"factory\\_botで読み込まれる各ファイルはブロック付きの`FactoryBot.define`で呼"
"ばれることになります。\n"
"ブロックは`FactoryBot::Syntax::Default::DSL`のインスタンス内で評価され、"
"`factory`や`sequence`や`trait`などのメソッドを利用できます。"

#. type: Title #
#: ../docs/src/ref/factory.md:1
#, no-wrap
msgid "factory"
msgstr "ファクトリ"

#. type: Plain text
#: ../docs/src/ref/factory.md:5
msgid ""
"Within a `FactoryBot.define` block, you can define factories. Anything "
"defined using `factory` can be built using a [build strategy](build-"
"strategies.html)."
msgstr ""
"`FactoryBot.define`ブロック内ではファクトリを定義できます。\n"
"`factory`を使って定義された全てのものは[構築戦略](build-strategies.html)を"
"使って構築できます。"

#. type: Plain text
#: ../docs/src/ref/factory.md:8
msgid ""
"The `factory` method takes three arguments: a required name, an optional "
"hash of options, and an optional block."
msgstr ""
"`factory`メソッドは3つの実引数を取ります。\n"
"必須の名前、省略できるオプションのハッシュ、そして省略できるブロックです。"

#. type: Plain text
#: ../docs/src/ref/factory.md:10
msgid "The name is expected to be a Symbol."
msgstr "名前はSymbolにすることになっています。"

#. type: Title ##
#: ../docs/src/ref/factory.md:11
#, no-wrap
msgid "Options"
msgstr "オプション"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:22
msgid ""
"`:class` - what class to construct. This can be either a class, or a String "
"or Symbol (anything that responds to `#to_s`). By default it is either the "
"parent's class name or the factory's name."
msgstr ""
"`:class`は、構築するクラスです。\n"
"クラスないしStringやSymbol（`#to_s`に応答する任意のもの）にできます。\n"
"既定では親クラス名かファクトリ名の何れかです。"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:22
msgid ""
"`:parent`- the name of another factory that this factory should inherit "
"from.  Defaults to `nil`."
msgstr ""
"`:parent`はこのファクトリが継承する別のファクトリ名です。\n"
"既定では`nil`です。"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:22
msgid ""
"`:aliases` - alternative names for this factory. Any of these names can be "
"used with a build strategy. Defaults to the empty list."
msgstr ""
"`:aliases`はこのファクトリの別名です。\n"
"構築戦略で使えます。\n"
"既定では空リストです。"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:22
msgid ""
"`:traits` - base traits that are used by default when building this "
"factory.  Defaults to the empty list."
msgstr ""
"`:traits`はこのファクトリを構築するときに既定で使われる既定のトレイトです。\n"
"既定で空リストです。"

#. type: Title ##
#: ../docs/src/ref/factory.md:23
#, no-wrap
msgid "Block"
msgstr "ブロック"

#. type: Plain text
#: ../docs/src/ref/factory.md:26
msgid ""
"You can use the block to define your factory. Within here you have access to "
"the following methods:"
msgstr ""
"ブロックを使ってファクトリを定義できます。\n"
"この中では以下のメソッドが使えます。"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`add_attribute`](add_attribute.md)"
msgstr "[`add_attribute`](add_attribute.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`association`](association.md)"
msgstr "[`association`](association.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`sequence`](sequence.md)"
msgstr "[`sequence`](sequence.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`trait`](trait.md)"
msgstr "[`trait`](trait.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`method_missing`](method_missing.md)"
msgstr "[`method_missing`](method_missing.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`transient`](transient.md)"
msgstr "[`transient`](transient.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`traits_for_enum`](traits_for_enum.md)"
msgstr "[`traits_for_enum`](traits_for_enum.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`initialize_with`](build-and-create.md#initialize_with)"
msgstr "[`initialize_with`](build-and-create.md#initialize_with)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`skip_create`](build-and-create.md)"
msgstr "[`skip_create`](build-and-create.md)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`to_create`](build-and-create.md#to_create)"
msgstr "[`to_create`](build-and-create.md#to_create)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`before`](hooks.md#after-and-before-methods)"
msgstr "[`before`](hooks.md#after-and-before-methods)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`after`](hooks.md#after-and-before-methods)"
msgstr "[`after`](hooks.md#after-and-before-methods)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "[`callback`](hooks.md#callback)"
msgstr "[`callback`](hooks.md#callback)"

#. type: Bullet: '- '
#: ../docs/src/ref/factory.md:41
msgid "`factory`"
msgstr "`factory`"

#. type: Plain text
#: ../docs/src/ref/factory.md:43
msgid ""
"You can use `factory` inside a `factory` block to define a new factory with "
"an implied parent."
msgstr ""
"`factory`内で`factory`を使うと、暗示した親を持つ新しいファクトリを定義できま"
"す。"

#. type: Title #
#: ../docs/src/ref/find_definitions.md:1
#, no-wrap
msgid "FactoryBot.find_definitions"
msgstr "FactoryBot.find_definitions"

#. type: Plain text
#: ../docs/src/ref/find_definitions.md:5
msgid ""
"The `FactoryBot.find_definitions` method loads in all factory\\_bot "
"definitions across the project."
msgstr ""
"`FactoryBot.find_definitions`メソッドはプロジェクトに亙る全てのfactory\\_bot"
"の定義を読み込みます。"

#. type: Plain text
#: ../docs/src/ref/find_definitions.md:8
msgid ""
"The load order is controlled by the `FactoryBot.definition_file_paths` "
"attribute. The default load order is:"
msgstr ""
"読込順は`FactoryBot.definition_file_paths`属性で制御します。\n"
"既定の読込順は以下の通りです。"

#. type: Bullet: '1. '
#: ../docs/src/ref/find_definitions.md:14
msgid "`factories.rb`"
msgstr "`factories.rb`"

#. type: Bullet: '1. '
#: ../docs/src/ref/find_definitions.md:14
msgid "`test/factories.rb`"
msgstr "`test/factories.rb`"

#. type: Bullet: '1. '
#: ../docs/src/ref/find_definitions.md:14
msgid "`test/factories/**/*.rb`"
msgstr "`test/factories/**/*.rb`"

#. type: Bullet: '1. '
#: ../docs/src/ref/find_definitions.md:14
msgid "`spec/factories.rb`"
msgstr "`spec/factories.rb`"

#. type: Bullet: '1. '
#: ../docs/src/ref/find_definitions.md:14
msgid "`spec/factories/**/*.rb`"
msgstr "`spec/factories/**/*.rb`"

#. type: Title ##
#: ../docs/src/ref/find_definitions.md:15
#, no-wrap
msgid "Rails"
msgstr "Rails"

#. type: Plain text
#: ../docs/src/ref/find_definitions.md:20
msgid ""
"The `.find_definitions` method is called automatically by "
"`factory_bot_rails` after initialize. The `.definition_file_paths` can be "
"set during initialization (e.g. `config/initializers`), or via `Rails."
"application.config.factory_bot.definition_file_paths`."
msgstr ""
"`.find_definitions`メソッドは初期化後に`factory_bot_rails`により自動的に呼ば"
"れます。\n"
"初期化時に（`config/initializers`などで）`.definition_file_paths`を設定した"
"り、`Rails.application.config.factory_bot.definition_file_paths`で設定したり"
"できます。"

#. type: Title #
#: ../docs/src/ref/hooks.md:1
#, no-wrap
msgid "Hooks"
msgstr "フック"

#. type: Plain text
#: ../docs/src/ref/hooks.md:6
msgid ""
"Within a `factory` definition block and the `FactoryBot.define` block, you "
"have access to the `after`, `before`, and `callback` methods. This allow you "
"to hook into parts of the [build strategies]."
msgstr ""
"`factory`定義ブロックや`FactoryBot.define`ブロック内部では、`after`メソッドや"
"`before`メソッドや`callback`メソッドが使えます。\n"
"これにより[構築戦略][build strategies]の一部にフックを掛けられます。"

#. type: Link reference
#: ../docs/src/ref/hooks.md:7
#, no-wrap
msgid "[build strategies]: build-strategies.html"
msgstr "[build strategies]: build-strategies.html"

#. type: Plain text
#: ../docs/src/ref/hooks.md:11
msgid ""
"Within a `factory` definition block, these callbacks are scoped to just that "
"factory. Within a `FactoryBot.define` block, they are global to all "
"factories."
msgstr ""
"`factory`定義ブロック内では、これらのコールバックはそのファクトリのみのスコー"
"プとなります。\n"
"`FactoryBot.define`ブロック内では、全てのファクトリに対して大域的になります。"

#. type: Title ##
#: ../docs/src/ref/hooks.md:12
#, no-wrap
msgid "`callback`"
msgstr "`callback`"

#. type: Plain text
#: ../docs/src/ref/hooks.md:17
msgid ""
"The `callback` method allows you to hook into any factory\\_bot callback by "
"name. The pre-defined names, as seen in the [build strategies] reference, "
"are `after_build`, `before_create`, `after_create`, and `after_stub`."
msgstr ""
"`callback`メソッドは任意のfactory\\_botコールバックを名前でフックを掛けられま"
"す。\n"
"[構築戦略][build strategies]の便覧に見られる通り、予め定義された名前は"
"`after_build`と`before_create`と`after_create`と`after_stub`です。"

#. type: Plain text
#: ../docs/src/ref/hooks.md:21
msgid ""
"This method takes a splat of names, and a block. It invokes the block any "
"time one of the names is activated. The block can be anything that responds "
"to `#to_proc`."
msgstr ""
"このメソッドはスプラットされる名前とブロックを取ります。\n"
"名前のどれかが活性になる度にブロックが呼ばれます。\n"
"ブロックは`#to_proc`に応答する任意のものにできます。"

#. type: Plain text
#: ../docs/src/ref/hooks.md:25
msgid ""
"This block takes two arguments: the instance of the factory, and the "
"factory\\_bot context. The context holds [transient](transient.html)  "
"attributes."
msgstr ""
"このブロックは2つの実引数を取ります。\n"
"1つはファクトリのインスタンスで、もう1つはfactory\\_botの文脈です。\n"
"文脈は[transient](transient.html)属性を持ちます。"

#. type: Plain text
#: ../docs/src/ref/hooks.md:29
msgid ""
"The same callback name can be hooked into multiple times. Every block is "
"run, in the order it was defined. Callbacks are inherited from their "
"parents; the parents' callbacks are run first."
msgstr ""
"同じコールバック名を複数回フックに掛けられます。\n"
"ブロックは全て、定義された順に実行されます。\n"
"コールバックは親から継承します。\n"
"親のコールバックがまず実行されます。"

#. type: Title ##
#: ../docs/src/ref/hooks.md:30
#, no-wrap
msgid "`after` and `before` methods"
msgstr "`after`メソッドと`before`メソッド"

#. type: Plain text
#: ../docs/src/ref/hooks.md:33
msgid "The `after` and `before` methods add some nice syntax to `callback`:"
msgstr ""
"`after`メソッドと`before`メソッドは`callback`にいい感じの構文を加えています。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/hooks.md:34
#, no-wrap
msgid ""
"after(:create) do |user, context|\n"
"  user.post_first_article(context.article)\n"
"end\n"
"\n"
"callback(:after_create) do |user, context|\n"
"  user.post_first_article(context.article)\n"
"end\n"
msgstr ""
"after(:create) do |user, context|\n"
"  user.post_first_article(context.article)\n"
"end\n"
"\n"
"callback(:after_create) do |user, context|\n"
"  user.post_first_article(context.article)\n"
"end\n"

#. type: Title #
#: ../docs/src/ref/lint.md:1
#, no-wrap
msgid "FactoryBot.lint"
msgstr "FactoryBot.lint"

#. type: Plain text
#: ../docs/src/ref/lint.md:5
msgid ""
"The `FactoryBot.lint` method tries each factory and raises `FactoryBot::"
"InvalidFactoryError` on failure."
msgstr ""
"`FactoryBot.lint`メソッドは各ファクトリを試して失敗したときに`FactoryBot::"
"InvalidFactoryError`を投げます。"

#. type: Plain text
#: ../docs/src/ref/lint.md:7
msgid "It can take the following optional arguments:"
msgstr "以下の省略できる実引数を取れます。"

#. type: Bullet: '- '
#: ../docs/src/ref/lint.md:12
msgid ""
"A splat of factory names. This will restrict the linting to just the ones "
"listed. The default is all."
msgstr ""
"スプラットされるファクトリ名です。\n"
"これは1つのみにリントの対象を制限します。\n"
"既定は全てです。"

#. type: Bullet: '- '
#: ../docs/src/ref/lint.md:12
msgid "`:strategy` - the [build strategy] to use. The default is `:create`."
msgstr ""
"`:strategy`は使う[構築戦略][build strategy]です。\n"
"既定は`:create`です。"

#. type: Bullet: '- '
#: ../docs/src/ref/lint.md:12
msgid ""
"`:traits` - whether to try building each trait, too. The default is `false`."
msgstr ""
"`:traits`は各トレイトの構築も試みるかどうかを表します。\n"
"既定は`false`です。"

#. type: Bullet: '- '
#: ../docs/src/ref/lint.md:12
msgid ""
"`:verbose` - whether to show a stack trace on error. The default is `false`."
msgstr ""
"`:verbose`はエラーでスタックトレースを表示するかどうかです。\n"
"既定は`false`です。"

#. type: Link reference
#: ../docs/src/ref/lint.md:13
#, no-wrap
msgid "[build strategy]: build-strategies.html"
msgstr "[build strategy]: build-strategies.html"

#. type: Plain text
#: ../docs/src/ref/lint.md:16
msgid ""
"Suggested techniques for hooking `.lint` into your system is discussed in "
"[the guide](../linting-factories/summary.html)."
msgstr ""
"`.lint`をシステムにフックを掛けるお勧めの工夫については、[手引き](../linting-"
"factories/summary.html)で説明されています。"

#. type: Title #
#: ../docs/src/ref/method_missing.md:1
#, no-wrap
msgid "method_missing"
msgstr "method_missing"

#. type: Plain text
#: ../docs/src/ref/method_missing.md:6
msgid ""
"With a `factory` definition block, you can use `add_attribute`, "
"`association`, `sequence`, and `trait` to define a factory. You can also "
"level a default `method_missing` definition for potential shortcuts."
msgstr ""
"`factory`定義ブロックでは、`add_attribute`や`association`や`sequence`や`trait`を使ってファクトリを定義できます。\n"
"また、既定の`method_missing`定義を活かした早道も使えます。"

#. type: Plain text
#: ../docs/src/ref/method_missing.md:9
msgid ""
"Calling an unknown method (e.g. `name`, `admin`, `email`, `account`) "
"connects an association, sequence, trait, or attribute to the factory:"
msgstr ""
"未知のメソッド（例えば`name`や`admin`や`email`や`account`）を呼ぶと、関連や系"
"列やトレイトやファクトリの属性に繋がります。"

#. type: Bullet: '1. '
#: ../docs/src/ref/method_missing.md:12
msgid ""
"If the method missing is passed a block, it always defines an attribute.  "
"This allows you to set the value for the attribute."
msgstr ""
"method\\_missingにブロックが渡されたとき、常に属性を定義します。\n"
"これにより属性に値を設定できます。"

#. type: Bullet: '1. '
#: ../docs/src/ref/method_missing.md:16
msgid ""
"If the method missing is passed a hash as a argument with the key `:"
"factory`, then it always defines an association. This allows you to override "
"the factory used for the association."
msgstr ""
"method\\_missingに実引数としてキー`:factory`を持つハッシュが渡されたとき、常"
"に関連を定義します。\n"
"これにより関連に使うファクトリを上塗りできます。"

#. type: Bullet: '1. '
#: ../docs/src/ref/method_missing.md:19
msgid ""
"If there is another factory of the same name, then it defines an association."
msgstr "同名の別のファクトリがあるとき、関連を定義します。"

#. type: Bullet: '1. '
#: ../docs/src/ref/method_missing.md:22
msgid ""
"If there is a global sequence of the same name, then it defines an attribute "
"with a value that pulls from the sequence."
msgstr ""
"同名の大域系列があると、属性が定義されます。\n"
"系列から値が取り出されます。"

#. type: Bullet: '1. '
#: ../docs/src/ref/method_missing.md:25
msgid ""
"If there is a trait of the same name for that factory, then it turns that "
"trait on for all builds of this factory."
msgstr ""
"ファクトリに同名のトレイトがあるとき、このファクトリの全ての構築に対してトレ"
"イトを変えます。"

#. type: Plain text
#: ../docs/src/ref/method_missing.md:27
msgid "Using `method_missing` can turn an explicit definition:"
msgstr ""
"`method_missing`を使ってみましょう。\n"
"以下の明示的な定義があるとします。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/method_missing.md:28
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"  factory :account\n"
"  factory :organization\n"
"\n"
"  factory :user, traits: [:admin] do\n"
"    add_attribute(:name) { \"Lord Nikon\" }\n"
"    add_attribute(:email) { generate(:email) }\n"
"    association :account\n"
"    association :org, factory: :organization\n"
"\n"
"    trait :admin do\n"
"      add_attribute(:admin) { true }\n"
"    end\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"  factory :account\n"
"  factory :organization\n"
"\n"
"  factory :user, traits: [:admin] do\n"
"    add_attribute(:name) { \"Lord Nikon\" }\n"
"    add_attribute(:email) { generate(:email) }\n"
"    association :account\n"
"    association :org, factory: :organization\n"
"\n"
"    trait :admin do\n"
"      add_attribute(:admin) { true }\n"
"    end\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/ref/method_missing.md:48
msgid "... into a more implicit definition:"
msgstr "上記はもっと暗黙な定義にできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/method_missing.md:49
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"  factory :account\n"
"  factory :organization\n"
"\n"
"  factory :user do\n"
"    name { \"Lord Nikon\" }      # no more `add_attribute`\n"
"    admin                      # no more :traits\n"
"    email                      # no more `add_attribute`\n"
"    account                    # no more `association`\n"
"    org factory: :organization # no more `association`\n"
"\n"
"    trait :admin do\n"
"      admin { true }\n"
"    end\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"  factory :account\n"
"  factory :organization\n"
"\n"
"  factory :user do\n"
"    name { \"Lord Nikon\" }      # `add_attribute`なし\n"
"    admin                      # :traitsなし\n"
"    email                      # `add_attribute`なし\n"
"    account                    # `association`なし\n"
"    org factory: :organization # `association`なし\n"
"\n"
"    trait :admin do\n"
"      admin { true }\n"
"    end\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/ref/modify.md:1
#, no-wrap
msgid "FactoryBot.modify"
msgstr "FactoryBot.modify"

#. type: Plain text
#: ../docs/src/ref/modify.md:6
msgid ""
"The `FactoryBot.modify` class method defines a block with an _overriding_ "
"`factory` method available. That is the only method you can call within the "
"block."
msgstr ""
"`FactoryBot.modify`クラスメソッドは使える`factory`メソッドを*上塗り*してブ"
"ロックを定義します。\n"
"ブロック内で呼べる唯一のメソッドです。"

#. type: Plain text
#: ../docs/src/ref/modify.md:11
msgid ""
"The `factory` method within this block takes a mandatory factory name, and a "
"block. All other arguments are ignored. The factory name must already be "
"defined. The block is a normal [factory definition block](factory.html). "
"Take note that [hooks](hooks.html) cannot be cleared and continue to "
"compound."
msgstr ""
"このブロック内の`factory`メソッドは必須のファクトリ名とブロックを取ります。\n"
"他の全ての実引数は無視されます。\n"
"ファクトリ名は定義済みでなければなりません。\n"
"ブロックは通常の[ファクトリ定義ブロック](factory.html)です。\n"
"なお[フック](hooks.html)は消去できず、合わさったままになります。"

#. type: Plain text
#: ../docs/src/ref/modify.md:13
msgid ""
"For details on why you'd want to use this, see [the guide](../modifying-"
"factories/summary.html)."
msgstr ""
"これを使いたい状況になる理由についての詳細は、[手引き](../modifying-"
"factories/summary.html)を参照してください。"

#. type: Title #
#: ../docs/src/ref/register_strategy.md:1
#, no-wrap
msgid "FactoryBot.register_strategy"
msgstr "FactoryBot.register_strategy"

#. type: Plain text
#: ../docs/src/ref/register_strategy.md:5
msgid ""
"The `FactoryBot.register_strategy` method is how to add a [build strategy]"
"(build-strategies.html)."
msgstr ""
"`FactoryBot.register_strategy`メソッドは[構築戦略](build-strategies.html)の加"
"え方です。"

#. type: Plain text
#: ../docs/src/ref/register_strategy.md:8
msgid ""
"It takes two mandatory arguments: name and class. The name is a Symbol, and "
"registering it exposes a method under `FactoryBot::Syntax::Methods`."
msgstr ""
"2つの必須の実引数である名前とクラスを取ります。\n"
"名前はSymbolで、`FactoryBot::Syntax::Methods`下に現すメソッドを登録します。"

#. type: Plain text
#: ../docs/src/ref/register_strategy.md:10
msgid "The class must define the methods `association` and `result`."
msgstr "クラスはメソッド`association`と`result`を定義しなければなりません。"

#. type: Plain text
#: ../docs/src/ref/register_strategy.md:15
msgid ""
"The `association` method takes an instance of `FactoryRunner`. You can "
"`#run` this runner, passing a strategy name (it defaults to the current one) "
"and an optional block. The block is called after the association is built, "
"and is passed the object that was built."
msgstr ""
"`association`メソッドは`FactoryRunner`のインスタンスを取ります。\n"
"このランナーを`#run`で走らせられます。\n"
"このとき戦略名（既定は現在のもの）と省略できるブロックを渡します。\n"
"ブロックは関連が構築された後に呼ばれ、構築されたオブジェクトが渡されます。"

#. type: Plain text
#: ../docs/src/ref/register_strategy.md:18
msgid ""
"The `result` method takes the object that was built for this factory (using "
"`initalize_with`), and returns the result of this factory for this build "
"strategy."
msgstr ""
"`result`メソッドは（`initialize_with`を使って）このファクトリで構築されたオブ"
"ジェクトを取り、この構築戦略用のファクトリの結果を返します。"

#. type: Title #
#: ../docs/src/ref/sequence.md:1
#, no-wrap
msgid "sequence"
msgstr "系列"

#. type: Plain text
#: ../docs/src/ref/sequence.md:4
msgid ""
"A factory\\_bot set up supports two levels of sequences: global and factory-"
"specific."
msgstr ""
"factory\\_botは2つの水準の系列に対応しています。\n"
"大域的なものとファクトリ固有のものです。"

#. type: Title #
#: ../docs/src/ref/sequence.md:5 ../docs/src/sequences/global-sequences.md:1
#, no-wrap
msgid "Global sequences"
msgstr "大域系列"

#. type: Plain text
#: ../docs/src/ref/sequence.md:9
msgid ""
"With a [`Factory.define`] block, use the `sequence` method to define global "
"sequences that can be shared with other factories."
msgstr "[`Factory.define`]ブロックでは、`sequence`メソッドを使うと、他のファクトリで共有できる大域系列が定義されます。"

#. type: Link reference
#: ../docs/src/ref/sequence.md:10
#, no-wrap
msgid "[`Factory.define`]: define.html"
msgstr "[`Factory.define`]: define.html"

#. type: Plain text
#: ../docs/src/ref/sequence.md:14
msgid ""
"The `sequence` method takes a name, optional arguments, and a block. The "
"name is expected to be a Symbol."
msgstr ""
"`sequence`メソッドは、名前、省略できる実引数、ブロックを取ります。\n"
"名前はSymbolにすることになっています。"

#. type: Plain text
#: ../docs/src/ref/sequence.md:17
msgid ""
"The supported arguments are a number representing the starting value "
"(default: `1`), and `:aliases` (default `[]`). The starting value must "
"respond to `#next`."
msgstr ""
"対応する実引数は、開始の値を表す数値（既定で`1`）と`:aliases`（既定で`[]`）で"
"す。\n"
"開始の値は`#next`に応答しなければなりません。"

#. type: Plain text
#: ../docs/src/ref/sequence.md:19
msgid "The block takes a value as an argument, and returns a result."
msgstr "ブロックは値を実引数として取り、結果を返します。"

#. type: Plain text
#: ../docs/src/ref/sequence.md:22
msgid ""
"The sequence value is incremented globally. Using an `:email_address` "
"sequence from multiple places increments the value each time."
msgstr ""
"系列の値は大域的に増加します。\n"
"複数の場所で`:email_address`系列を使うと、都度値が漸増します。"

#. type: Plain text
#: ../docs/src/ref/sequence.md:24 ../docs/src/ref/trait.md:10
msgid "See [method_missing](method_missing.html) for a shorthand."
msgstr ""
"早道については[method_missing](method_missing.html)を参照してください。"

#. type: Title ##
#: ../docs/src/ref/sequence.md:25
#, no-wrap
msgid "Factory sequences"
msgstr "ファクトリ系列"

#. type: Plain text
#: ../docs/src/ref/sequence.md:30
msgid ""
"Sequences can be localized within `factory` blocks. The syntax is the same "
"as for a global sequence, but the scope of the incremented value is limited "
"to the factory definition."
msgstr ""
"系列はファクトリブロック内に留めておけます。\n"
"構文は大域系列と同じですが、漸増する値のスコープはファクトリ定義に限られま"
"す。"

#. type: Plain text
#: ../docs/src/ref/sequence.md:33
msgid ""
"In addition, using `sequence` with a `factory` block implicitly calls "
"`add_attribute` for that value."
msgstr ""
"加えて`factory`ブロックで`sequence`を使うと、暗黙にその値に`add_attribute`を"
"呼びます。"

#. type: Plain text
#: ../docs/src/ref/sequence.md:36
msgid ""
"These two are similar, except the second example does not cause any global "
"sequences to exist:"
msgstr "以下の2つは似ていますが、2つ目の例は大域系列が存在しません。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/sequence.md:37
#, no-wrap
msgid ""
"# A global sequence\n"
"sequence(:user_factory_email) { |n| \"person#{n}@example.com\" }\n"
"\n"
"factory :user do\n"
"  # Using a global sequence\n"
"  email { generate(:user_factory_email) }\n"
"end\n"
msgstr ""
"# 大域系列\n"
"sequence(:user_factory_email) { |n| \"person#{n}@example.com\" }\n"
"\n"
"factory :user do\n"
"  # 大域系列を使う\n"
"  email { generate(:user_factory_email) }\n"
"end\n"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/sequence.md:47
#, no-wrap
msgid ""
"# A factory-scoped sequence\n"
"factory :user do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"end\n"
msgstr ""
"# ファクトリのスコープの系列\n"
"factory :user do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"end\n"

#. type: Title #
#: ../docs/src/ref/trait.md:1
#, no-wrap
msgid "trait"
msgstr "トレイト"

#. type: Plain text
#: ../docs/src/ref/trait.md:4
msgid ""
"Within a `factory` definition block, use the `trait` method to define named "
"permutations of the factory."
msgstr "`factory`定義ブロック内で`trait`メソッドを使うと、ファクトリの変更内容が名前付きで定義されます。"

#. type: Plain text
#: ../docs/src/ref/trait.md:7
msgid ""
"The trait method takes a name (Symbol) and a block. Treat the block like you "
"would a [`factory`] definition block."
msgstr ""
"トレイトメソッドは名前 (Symbol) とブロックを取ります。\n"
"ブロックは[`factory`]定義ブロックのように扱います。"

#. type: Link reference
#: ../docs/src/ref/trait.md:8
#, no-wrap
msgid "[`factory`]: factory.html"
msgstr "[`factory`]: factory.html"

#. type: Title #
#: ../docs/src/ref/traits_for_enum.md:1
#, no-wrap
msgid "traits_for_enum"
msgstr "traits_for_enum"

#. type: Plain text
#: ../docs/src/ref/traits_for_enum.md:7
msgid ""
"With a `factory` definition block, the `traits_for_enum` method is a helper "
"for any object with an attribute that can be one of a few values. The "
"original inspiration was [`ActiveRecord::Enum`] but it can apply to any "
"attribute with a restricted set of values."
msgstr ""
"`factory`定義ブロックには、`traits_for_enum`メソッドという補助機能があります。\n"
"任意のオブジェクトに、いくつかの値のうちのどれかになる属性を持たせます。\n"
"元となった着想は[`ActiveRecord::Enum`]ですが、限られた値の集合がある任意の属性に適用できます。"

#. type: Link reference
#: ../docs/src/ref/traits_for_enum.md:8
#, no-wrap
msgid "[`ActiveRecord::Enum`]: https://api.rubyonrails.org/classes/ActiveRecord/Enum.html"
msgstr "[`ActiveRecord::Enum`]: https://api.rubyonrails.org/classes/ActiveRecord/Enum.html"

#. type: Plain text
#: ../docs/src/ref/traits_for_enum.md:11
msgid "This method creates a trait for each value."
msgstr "このメソッドにより、それぞれの値にトレイトが作られます。"

#. type: Plain text
#: ../docs/src/ref/traits_for_enum.md:15
msgid ""
"The `traits_for_enum` method takes a required attribute name and an optional "
"set of values. The values can be any Enumerable, such as Array or Hash. By "
"default, the values are `nil`."
msgstr ""
"`traits_for_enum`メソッドは、必須の属性名と省略できる値の集合を取ります。\n"
"値は任意のEnumerableにできます。\n"
"例えばArrayやHashです。\n"
"既定では値は`nil`です。"

#. type: Plain text
#: ../docs/src/ref/traits_for_enum.md:19
msgid ""
"If the values are an Array, this method defines a trait for each element in "
"the array. The trait's name is the array element, and it sets the attribute "
"to the same array element."
msgstr ""
"値がArrayのとき、このメソッドは配列内の各要素にトレイトを定義します。\n"
"トレイト名は配列の要素であり、同じ配列の要素に属性を設定します。"

#. type: Plain text
#: ../docs/src/ref/traits_for_enum.md:23
msgid ""
"If the values are a Hash, this method defines traits based on the keys, "
"setting the attribute to the values. The trait's name is the key, and it "
"sets the attribute to the value."
msgstr ""
"値がHashのとき、このメソッドはキーに基づくトレイトを定義し、属性を値に設定し"
"ます。\n"
"トレイト名はキーであり、属性を値に設定します。"

#. type: Plain text
#: ../docs/src/ref/traits_for_enum.md:26
msgid ""
"If the value is any other Enumerable, it treats it like an Array or Hash "
"based on whether `#each` iterates in pairs like it does for Hashes."
msgstr ""
"値が何らかのEnumerableのとき、ArrayまたはHashのように扱います。\n"
"このとき、`#each`がHashのように対で反復するかどうかに基づきます。"

#. type: Plain text
#: ../docs/src/ref/traits_for_enum.md:29
msgid ""
"If the value is nil, it uses a class method named after the pluralized "
"attribute name."
msgstr "値がnilのとき、複数形になった属性名に因むクラスメソッドを使います。"

#. type: Fenced code block (ruby)
#: ../docs/src/ref/traits_for_enum.md:30
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :article do\n"
"    traits_for_enum :visibility, [:public, :private]\n"
"    # trait :public do\n"
"    #   visibility { :public }\n"
"    # end\n"
"    # trait :private do\n"
"    #   visibility { :private }\n"
"    # end\n"
"\n"
"    traits_for_enum :collaborative, draft: 0, shared: 1\n"
"    # trait :draft do\n"
"    #   collaborative { 0 }\n"
"    # end\n"
"    # trait :shared do\n"
"    #   collaborative { 1 }\n"
"    # end\n"
"\n"
"    traits_for_enum :status\n"
"    # Article.statuses.each do |key, value|\n"
"    #   trait key do\n"
"    #     status { value }\n"
"    #   end\n"
"    # end\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :article do\n"
"    traits_for_enum :visibility, [:public, :private]\n"
"    # trait :public do\n"
"    #   visibility { :public }\n"
"    # end\n"
"    # trait :private do\n"
"    #   visibility { :private }\n"
"    # end\n"
"\n"
"    traits_for_enum :collaborative, draft: 0, shared: 1\n"
"    # trait :draft do\n"
"    #   collaborative { 0 }\n"
"    # end\n"
"    # trait :shared do\n"
"    #   collaborative { 1 }\n"
"    # end\n"
"\n"
"    traits_for_enum :status\n"
"    # Article.statuses.each do |key, value|\n"
"    #   trait key do\n"
"    #     status { value }\n"
"    #   end\n"
"    # end\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/ref/transient.md:1
#, no-wrap
msgid "transient"
msgstr "transient"

#. type: Plain text
#: ../docs/src/ref/transient.md:6
msgid ""
"Within a `factory` definition block, the goal is to construct an instance of "
"the class. While factory\\_bot does this, it keeps track of data in a "
"context. To set data on this context, use a `transient` block."
msgstr ""
"`factory`定義ブロック内では、クラスのインスタンスを構築することが目標です。\n"
"factory\\_botはこれをするものですが、文脈でのデータの記録をつけています。\n"
"データをこの文脈に設定するには`transient`ブロックを使います。"

#. type: Plain text
#: ../docs/src/ref/transient.md:10
msgid ""
"Treat a `transient` block like a `factory` definition block. However, none "
"of the attributes, associations, traits, or sequences you set will impact "
"the final object."
msgstr ""
"`transient`ブロックは`factory`定義ブロックのように扱います。\n"
"しかし設定した属性、関連、トレイト、系列は最終的なオブジェクトに影響しませ"
"ん。"

#. type: Plain text
#: ../docs/src/ref/transient.md:12
msgid ""
"This is most useful when paired with [hooks](hooks.html) or [to_create]"
"(build-and-create.html)."
msgstr ""
"これは[フック](hooks.html)や[to_create](build-and-create.html)との取り合わせ"
"で一番有用です。"

#. type: Plain text
#: ../docs/src/sequences/aliases.md:4
msgid ""
"Sequences can also have aliases. The sequence aliases share the same counter:"
msgstr ""
"系列には別称も付けられます。\n"
"系列の別称は同じ計数を共有します。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/aliases.md:5
#, no-wrap
msgid ""
"factory :user do\n"
"  sequence(:email, 1000, aliases: [:sender, :receiver]) { |n| \"person#{n}@example.com\" }\n"
"end\n"
"\n"
"# will increase value counter for :email which is shared by :sender and :receiver\n"
"generate(:sender)\n"
msgstr ""
"factory :user do\n"
"  sequence(:email, 1000, aliases: [:sender, :receiver]) { |n| \"person#{n}@example.com\" }\n"
"end\n"
"\n"
"# :emailの計数を漸増させます。:senderと:receiverと共有しています。\n"
"generate(:sender)\n"

#. type: Plain text
#: ../docs/src/sequences/aliases.md:15
msgid "Define aliases and use default value (1) for the counter"
msgstr "別称を定義して計数に既定値 (1) を使うには以下とします。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/aliases.md:16
#, no-wrap
msgid ""
"factory :user do\n"
"  sequence(:email, aliases: [:sender, :receiver]) { |n| \"person#{n}@example.com\" }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  sequence(:email, aliases: [:sender, :receiver]) { |n| \"person#{n}@example.com\" }\n"
"end\n"

#. type: Plain text
#: ../docs/src/sequences/aliases.md:23
msgid "Setting the value:"
msgstr "値を設定するには以下です。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/aliases.md:24
#, no-wrap
msgid ""
"factory :user do\n"
"  sequence(:email, 'a', aliases: [:sender, :receiver]) { |n| \"person#{n}@example.com\" }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  sequence(:email, 'a', aliases: [:sender, :receiver]) { |n| \"person#{n}@example.com\" }\n"
"end\n"

#. type: Plain text
#: ../docs/src/sequences/aliases.md:31
msgid ""
"The value needs to support the `#next` method. Here the next value will be "
"'a', then 'b', etc."
msgstr ""
"値には`#next`メソッドへの対応が必要です。\n"
"ここでの次の値は「a」で、次に「b」、などとなります。"

#. type: Title #
#: ../docs/src/sequences/as-implicit-attributes.md:1
#: ../docs/src/traits/as-implicit-attributes.md:1
#, no-wrap
msgid "As implicit attributes"
msgstr "暗黙属性として"

#. type: Plain text
#: ../docs/src/sequences/as-implicit-attributes.md:4
msgid "Or as implicit attributes:"
msgstr "もしくは暗黙属性として以下とします。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/as-implicit-attributes.md:5
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  sequence :email do |n|\n"
"    \"person#{n}@example.com\"\n"
"  end\n"
"end\n"
"\n"
"factory :user do\n"
"  email # Same as `email { generate(:email) }`\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  sequence :email do |n|\n"
"    \"person#{n}@example.com\"\n"
"  end\n"
"end\n"
"\n"
"factory :user do\n"
"  email # `email { generate(:email) }`と同じです。\n"
"end\n"

#. type: Plain text
#: ../docs/src/sequences/as-implicit-attributes.md:18
msgid ""
"Note that defining sequences as implicit attributes will not work if you "
"have a factory with the same name as the sequence."
msgstr ""
"なお系列を暗黙属性として定義すると、ファクトリに系列として同じ名前があるとき"
"にうまくいかなくなります。"

#. type: Plain text
#: ../docs/src/sequences/global-sequences.md:6
msgid ""
"Unique values in a specific format (for example, e-mail addresses) can be "
"generated using sequences. Sequences are defined by calling `sequence` in a "
"definition block, and values in a sequence are generated by calling "
"`generate`:"
msgstr ""
"特定の形式（例えばEメールアドレス）の一意な値は系列を使って生成できます。\n"
"系列は定義ブロックで`sequence`を読んで定義されます。\n"
"系列の値は`generate`を読んで生成されます。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/global-sequences.md:7
#, no-wrap
msgid ""
"# Defines a new sequence\n"
"FactoryBot.define do\n"
"  sequence :email do |n|\n"
"    \"person#{n}@example.com\"\n"
"  end\n"
"end\n"
"\n"
"generate :email\n"
"# => \"person1@example.com\"\n"
"\n"
"generate :email\n"
"# => \"person2@example.com\"\n"
msgstr ""
"# 新しい系列を定義します。\n"
"FactoryBot.define do\n"
"  sequence :email do |n|\n"
"    \"person#{n}@example.com\"\n"
"  end\n"
"end\n"
"\n"
"generate :email\n"
"# => \"person1@example.com\"\n"
"\n"
"generate :email\n"
"# => \"person2@example.com\"\n"

#. type: Title #
#: ../docs/src/sequences/initial-value.md:1
#, no-wrap
msgid "Initial value"
msgstr "初期値"

#. type: Plain text
#: ../docs/src/sequences/initial-value.md:5
msgid ""
"You can override the initial value. Any value that responds to the `#next` "
"method will work (e.g. 1, 2, 3, 'a', 'b', 'c')"
msgstr ""
"初期値を上塗りできます。\n"
"`#next`メソッドに応答する任意の値で動作します（例えば1、2、3、「a」、「b」、"
"「c」）。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/initial-value.md:6
#, no-wrap
msgid ""
"factory :user do\n"
"  sequence(:email, 1000) { |n| \"person#{n}@example.com\" }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  sequence(:email, 1000) { |n| \"person#{n}@example.com\" }\n"
"end\n"

#. type: Title #
#: ../docs/src/sequences/inline-sequences.md:1
#, no-wrap
msgid "Inline sequences"
msgstr "行内系列"

#. type: Plain text
#: ../docs/src/sequences/inline-sequences.md:5
msgid ""
"And it's also possible to define an in-line sequence that is only used in a "
"particular factory:"
msgstr "また特定のファクトリでのみ使われる行内系列を定義することもできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/inline-sequences.md:6
#, no-wrap
msgid ""
"factory :user do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"end\n"

#. type: Plain text
#: ../docs/src/sequences/inline-sequences.md:14
msgid ""
"With Ruby 2.7's support for [numbered parameters][], inline definitions can "
"be even more abbreviated:"
msgstr ""
"Ruby 2.7の[連番仮引数][numbered parameters]の対応を使うと、行内定義はさらに縮"
"められます。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/inline-sequences.md:15
#, no-wrap
msgid ""
"factory :user do\n"
"  sequence(:email) { \"person#{_1}@example.com\" }\n"
"end\n"
msgstr ""
"factory :user do\n"
"  sequence(:email) { \"person#{_1}@example.com\" }\n"
"end\n"

#. type: Link reference
#: ../docs/src/sequences/inline-sequences.md:21
#, no-wrap
msgid "[numbered parameters]: https://ruby-doc.org/core-2.7.1/Proc.html#class-Proc-label-Numbered+parameters"
msgstr "[numbered parameters]: https://ruby-doc.org/core-2.7.1/Proc.html#class-Proc-label-Numbered+parameters"

#. type: Title #
#: ../docs/src/sequences/rewinding.md:1
#, no-wrap
msgid "Rewinding"
msgstr "巻き戻し"

#. type: Plain text
#: ../docs/src/sequences/rewinding.md:4
msgid "Sequences can also be rewound with `FactoryBot.rewind_sequences`:"
msgstr "系列は`FactoryBot.rewind_sequences`で巻き戻すこともできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/rewinding.md:5
#, no-wrap
msgid ""
"sequence(:email) {|n| \"person#{n}@example.com\" }\n"
"\n"
"generate(:email) # \"person1@example.com\"\n"
"generate(:email) # \"person2@example.com\"\n"
"generate(:email) # \"person3@example.com\"\n"
"\n"
"FactoryBot.rewind_sequences\n"
"\n"
"generate(:email) # \"person1@example.com\"\n"
msgstr ""
"sequence(:email) {|n| \"person#{n}@example.com\" }\n"
"\n"
"generate(:email) # \"person1@example.com\"\n"
"generate(:email) # \"person2@example.com\"\n"
"generate(:email) # \"person3@example.com\"\n"
"\n"
"FactoryBot.rewind_sequences\n"
"\n"
"generate(:email) # \"person1@example.com\"\n"

#. type: Plain text
#: ../docs/src/sequences/rewinding.md:17
msgid "This rewinds all registered sequences."
msgstr "こうすると全ての登録された系列が巻き戻ります。"

#. type: Title #
#: ../docs/src/sequences/uniqueness.md:1
#, no-wrap
msgid "Uniqueness"
msgstr "一意性"

#. type: Plain text
#: ../docs/src/sequences/uniqueness.md:5
msgid ""
"When working with uniqueness constraints, be careful not to pass in override "
"values that will conflict with the generated sequence values."
msgstr ""
"一意性制約に取り組むときは、生成される系列値と競合する値を渡して上塗りしない"
"ようにご注意ください。"

#. type: Plain text
#: ../docs/src/sequences/uniqueness.md:8
msgid ""
"In this example the email will be the same for both users. If email must be "
"unique, this code will error:"
msgstr ""
"以下の例ではEメールが両方の利用者で同じになります。\n"
"Eメールが一意でなければならないとき、このコードはエラーになります。"

#. type: Fenced code block (rb)
#: ../docs/src/sequences/uniqueness.md:9
#, no-wrap
msgid ""
"factory :user do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"end\n"
"\n"
"FactoryBot.create(:user, email: \"person1@example.com\")\n"
"FactoryBot.create(:user)\n"
msgstr ""
"factory :user do\n"
"  sequence(:email) { |n| \"person#{n}@example.com\" }\n"
"end\n"
"\n"
"FactoryBot.create(:user, email: \"person1@example.com\")\n"
"FactoryBot.create(:user)\n"

#. type: Title #
#: ../docs/src/sequences/with-dynamic-attributes.md:1
#, no-wrap
msgid "With dynamic attributes"
msgstr "動的属性付き"

#. type: Plain text
#: ../docs/src/sequences/with-dynamic-attributes.md:4
msgid "Sequences can be used in dynamic attributes:"
msgstr "系列は動的属性で使えます。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/with-dynamic-attributes.md:5
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  sequence :email do |n|\n"
"    \"person#{n}@example.com\"\n"
"  end\n"
"end\n"
"\n"
"factory :invite do\n"
"  invitee { generate(:email) }\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  sequence :email do |n|\n"
"    \"person#{n}@example.com\"\n"
"  end\n"
"end\n"
"\n"
"factory :invite do\n"
"  invitee { generate(:email) }\n"
"end\n"

#. type: Title #
#: ../docs/src/sequences/without-a-block.md:1
#, no-wrap
msgid "Without a block"
msgstr "ブロック無し"

#. type: Plain text
#: ../docs/src/sequences/without-a-block.md:4
msgid ""
"Without a block, the value will increment itself, starting at its initial "
"value:"
msgstr "ブロック無しでは値はそれ自身を漸増させ、初期値から始めていきます。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/without-a-block.md:5
#, no-wrap
msgid ""
"factory :post do\n"
"  sequence(:position)\n"
"end\n"
msgstr ""
"factory :post do\n"
"  sequence(:position)\n"
"end\n"

#. type: Plain text
#: ../docs/src/sequences/without-a-block.md:13
msgid ""
"Note that the value for the sequence could be any Enumerable instance, as "
"long as it responds to `#next`:"
msgstr ""
"なお系列用の値は、`#next`に応答する限り、任意のEnumerableインスタンスにできま"
"す。"

#. type: Fenced code block (ruby)
#: ../docs/src/sequences/without-a-block.md:14
#, no-wrap
msgid ""
"factory :task do\n"
"  sequence :priority, %i[low medium high urgent].cycle\n"
"end\n"
msgstr ""
"factory :task do\n"
"  sequence :priority, %i[low medium high urgent].cycle\n"
"end\n"

#. type: Title #
#: ../docs/src/setup/summary.md:1
#, no-wrap
msgid "Setup"
msgstr "準備"

#. type: Plain text
#: ../docs/src/setup/summary.md:5
msgid ""
"Installation varies based on the framework you are using, if any, and "
"optionally the test framework."
msgstr ""
"インストール手順は様々です。\n"
"もしあれば使っているフレームワークに依りますし、テストフレームワークについて"
"も考えられます。"

#. type: Plain text
#: ../docs/src/setup/summary.md:9
msgid ""
"Since installation varies based on code that we do not control, those docs "
"are kept up-to-date in [our wiki]. We encourage you to edit the wiki as the "
"frameworks change."
msgstr ""
"インストール手順が私達の手の届かないコードに基づいて様々であるため、そうした"
"ドキュメントは[ウィキ][our wiki]で更新され続けます。\n"
"フレームワークが変わったときにウィキを編集することをお勧めします。"

#. type: Plain text
#: ../docs/src/setup/summary.md:12
msgid ""
"Below we document the most common setup. However, **we go into more detail "
"in [our wiki]**."
msgstr ""
"以降では最もよくある準備をドキュメントとして書きます。\n"
"**しかし詳細は[ウィキ][our wiki]をあたってください。**"

#. type: Link reference
#: ../docs/src/setup/summary.md:13
#, no-wrap
msgid "[our wiki]: https://github.com/thoughtbot/factory_bot/wiki/Installation"
msgstr "[our wiki]: https://github.com/thoughtbot/factory_bot/wiki/Installation"

#. type: Title ##
#: ../docs/src/setup/summary.md:15
#, no-wrap
msgid "Update Your Gemfile"
msgstr "Gemfileの更新"

#. type: Plain text
#: ../docs/src/setup/summary.md:18
msgid "If you're using Rails:"
msgstr "Railsを使っている場合は次のようにしてください。"

#. type: Fenced code block (ruby)
#: ../docs/src/setup/summary.md:19
#, no-wrap
msgid "gem \"factory_bot_rails\"\n"
msgstr "gem \"factory_bot_rails\"\n"

#. type: Plain text
#: ../docs/src/setup/summary.md:24
msgid "If you're *not* using Rails:"
msgstr "Railsを使って*いない*場合は次のようにしてください。"

#. type: Fenced code block (ruby)
#: ../docs/src/setup/summary.md:25
#, no-wrap
msgid "gem \"factory_bot\"\n"
msgstr "gem \"factory_bot\"\n"

#. type: Plain text
#: ../docs/src/setup/summary.md:30 ../docs/src/setup/summary.md:49
msgid "For more, see [our wiki]."
msgstr "詳細については[私達のウィキ][our wiki]を参照してください。"

#. type: Title ##
#: ../docs/src/setup/summary.md:31
#, no-wrap
msgid "Configure your test suite"
msgstr "テストスートの構成"

#. type: Title ###
#: ../docs/src/setup/summary.md:33
#, no-wrap
msgid "RSpec"
msgstr "RSpec"

#. type: Fenced code block (ruby)
#: ../docs/src/setup/summary.md:35
#, no-wrap
msgid ""
"RSpec.configure do |config|\n"
"  config.include FactoryBot::Syntax::Methods\n"
"end\n"
msgstr ""
"RSpec.configure do |config|\n"
"  config.include FactoryBot::Syntax::Methods\n"
"end\n"

#. type: Title ###
#: ../docs/src/setup/summary.md:41
#, no-wrap
msgid "Test::Unit"
msgstr "Test::Unit"

#. type: Fenced code block (ruby)
#: ../docs/src/setup/summary.md:43
#, no-wrap
msgid ""
"class Test::Unit::TestCase\n"
"  include FactoryBot::Syntax::Methods\n"
"end\n"
msgstr ""
"class Test::Unit::TestCase\n"
"  include FactoryBot::Syntax::Methods\n"
"end\n"

#. type: Plain text
#: ../docs/src/traits/as-implicit-attributes.md:4
msgid "Traits can be used as implicit attributes:"
msgstr "トレイトは暗黙属性として使えます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/as-implicit-attributes.md:5
#, no-wrap
msgid ""
"factory :week_long_published_story_with_title, parent: :story do\n"
"  published\n"
"  week_long_publishing\n"
"  title { \"Publishing that was started at #{start_at}\" }\n"
"end\n"
msgstr ""
"factory :week_long_published_story_with_title, parent: :story do\n"
"  published\n"
"  week_long_publishing\n"
"  title { \"Publishing that was started at #{start_at}\" }\n"
"end\n"

#. type: Plain text
#: ../docs/src/traits/as-implicit-attributes.md:14
msgid ""
"Note that defining traits as implicit attributes will not work if you have a "
"factory or sequence with the same name as the trait."
msgstr ""
"なおトレイトを暗黙属性として定義すると、トレイトと同じ名前のファクトリや系列"
"があるときに、うまくいかなくなります。"

#. type: Title #
#: ../docs/src/traits/attribute-precedence.md:1
#, no-wrap
msgid "Attribute precedence"
msgstr "属性の優先度"

#. type: Plain text
#: ../docs/src/traits/attribute-precedence.md:5
msgid ""
"Traits that define the same attributes won't raise "
"AttributeDefinitionErrors; the trait that defines the attribute last gets "
"precedence."
msgstr ""
"同じ属性を定義するトレイトはAttributeDefinitionErrorsを投げません。\n"
"最後に属性を定義したトレイトが優先されます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/attribute-precedence.md:6
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"  login { name }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"    login { \"#{name} (active)\" }\n"
"  end\n"
"\n"
"  trait :inactive do\n"
"    name { \"Jane Doe\" }\n"
"    status { :inactive }\n"
"    login { \"#{name} (inactive)\" }\n"
"  end\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"    login { \"admin-#{name}\" }\n"
"  end\n"
"\n"
"  factory :active_admin,   traits: [:active, :admin]   # login will be \"admin-John Doe\"\n"
"  factory :inactive_admin, traits: [:admin, :inactive] # login will be \"Jane Doe (inactive)\"\n"
"end\n"
msgstr ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"  login { name }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"    login { \"#{name} (active)\" }\n"
"  end\n"
"\n"
"  trait :inactive do\n"
"    name { \"Jane Doe\" }\n"
"    status { :inactive }\n"
"    login { \"#{name} (inactive)\" }\n"
"  end\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"    login { \"admin-#{name}\" }\n"
"  end\n"
"\n"
"  factory :active_admin,   traits: [:active, :admin]   # loginは「admin-John Doe」になります。\n"
"  factory :inactive_admin, traits: [:admin, :inactive] # loginは「Jane Doe (inactive)」になります。\n"
"end\n"

#. type: Title #
#: ../docs/src/traits/enum.md:1
#, no-wrap
msgid "Enum traits"
msgstr "列挙トレイト"

#. type: Plain text
#: ../docs/src/traits/enum.md:4
msgid "Given an Active Record model with an enum attribute:"
msgstr "列挙属性を持つActive Recordがあるとします。"

#. type: Fenced code block (rb)
#: ../docs/src/traits/enum.md:5
#, no-wrap
msgid ""
"class Task < ActiveRecord::Base\n"
"  enum status: {queued: 0, started: 1, finished: 2}\n"
"end\n"
"\n"
msgstr ""
"class Task < ActiveRecord::Base\n"
"  enum status: {queued: 0, started: 1, finished: 2}\n"
"end\n"
"\n"

#. type: Plain text
#: ../docs/src/traits/enum.md:14
msgid ""
"factory\\_bot will automatically define traits for each possible value of "
"the enum:"
msgstr ""
"factory\\_botは列挙体の取り得る値それぞれについて自動的にトレイトを定義しま"
"す。"

#. type: Fenced code block (rb)
#: ../docs/src/traits/enum.md:15
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :task\n"
"end\n"
"\n"
"FactoryBot.build(:task, :queued)\n"
"FactoryBot.build(:task, :started)\n"
"FactoryBot.build(:task, :finished)\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :task\n"
"end\n"
"\n"
"FactoryBot.build(:task, :queued)\n"
"FactoryBot.build(:task, :started)\n"
"FactoryBot.build(:task, :finished)\n"

#. type: Plain text
#: ../docs/src/traits/enum.md:26
msgid ""
"Writing the traits out manually would be cumbersome, and is not necessary:"
msgstr "手でトレイトを書くのは億劫であり、必要ありません。"

#. type: Fenced code block (rb)
#: ../docs/src/traits/enum.md:27
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  factory :task do\n"
"    trait :queued do\n"
"      status { :queued }\n"
"    end\n"
"\n"
"    trait :started do\n"
"      status { :started }\n"
"    end\n"
"\n"
"    trait :finished do\n"
"      status { :finished }\n"
"    end\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  factory :task do\n"
"    trait :queued do\n"
"      status { :queued }\n"
"    end\n"
"\n"
"    trait :started do\n"
"      status { :started }\n"
"    end\n"
"\n"
"    trait :finished do\n"
"      status { :finished }\n"
"    end\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/traits/enum.md:48
msgid ""
"If automatically defining traits for enum attributes on every factory is not "
"desired, it is possible to disable the feature by setting `FactoryBot."
"automatically_define_enum_traits = false`"
msgstr ""
"全てのファクトリで列挙属性にトレイトを自動的に定義することが望ましくなけれ"
"ば、この機能を`FactoryBot.automatically_define_enum_traits = false`で無効にで"
"きます。"

#. type: Plain text
#: ../docs/src/traits/enum.md:51
msgid ""
"In that case, it is still possible to explicitly define traits for an enum "
"attribute in a particular factory:"
msgstr ""
"その場合でも特定のファクトリで列挙属性にトレイトを明示的に定義できます。"

#. type: Fenced code block (rb)
#: ../docs/src/traits/enum.md:52
#, no-wrap
msgid ""
"FactoryBot.automatically_define_enum_traits = false\n"
"\n"
"FactoryBot.define do\n"
"  factory :task do\n"
"    traits_for_enum(:status)\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.automatically_define_enum_traits = false\n"
"\n"
"FactoryBot.define do\n"
"  factory :task do\n"
"    traits_for_enum(:status)\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/traits/enum.md:64
msgid ""
"It is also possible to use this feature for other enumerable values, not "
"specifically tied to Active Record enum attributes."
msgstr ""
"他の列挙できる値にこの機能を使うこともできます。\n"
"特別にActive Recordの列挙属性に結び付いているわけではありません。"

#. type: Plain text
#: ../docs/src/traits/enum.md:66
msgid "With an array:"
msgstr "配列の場合は以下です。"

#. type: Fenced code block (rb)
#: ../docs/src/traits/enum.md:67
#, no-wrap
msgid ""
"class Task\n"
"  attr_accessor :status\n"
"end\n"
"\n"
"FactoryBot.define do\n"
"  factory :task do\n"
"    traits_for_enum(:status, [\"queued\", \"started\", \"finished\"])\n"
"  end\n"
"end\n"
msgstr ""
"class Task\n"
"  attr_accessor :status\n"
"end\n"
"\n"
"FactoryBot.define do\n"
"  factory :task do\n"
"    traits_for_enum(:status, [\"queued\", \"started\", \"finished\"])\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/traits/enum.md:80
msgid "Or with a hash:"
msgstr "あるいはハッシュの場合は以下です。"

#. type: Fenced code block (rb)
#: ../docs/src/traits/enum.md:81
#, no-wrap
msgid ""
"class Task\n"
"  attr_accessor :status\n"
"end\n"
"\n"
"FactoryBot.define do\n"
"  factory :task do\n"
"    traits_for_enum(:status, { queued: 0, started: 1, finished: 2 })\n"
"  end\n"
"end\n"
msgstr ""
"class Task\n"
"  attr_accessor :status\n"
"end\n"
"\n"
"FactoryBot.define do\n"
"  factory :task do\n"
"    traits_for_enum(:status, { queued: 0, started: 1, finished: 2 })\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/traits/in-child-factories.md:1
#, no-wrap
msgid "In child factories"
msgstr "子のファクトリの内部"

#. type: Plain text
#: ../docs/src/traits/in-child-factories.md:4
msgid ""
"You can override individual attributes granted by a trait in a child factory:"
msgstr ""
"子のファクトリの内部でトレイトから与えられる個々の属性を上塗りできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/in-child-factories.md:5
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"  login { name }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"    login { \"#{name} (M)\" }\n"
"  end\n"
"\n"
"  factory :brandon do\n"
"    active\n"
"    name { \"Brandon\" }\n"
"  end\n"
"end\n"
msgstr ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"  login { name }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"    login { \"#{name} (M)\" }\n"
"  end\n"
"\n"
"  factory :brandon do\n"
"    active\n"
"    name { \"Brandon\" }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/traits/mixins.md:1
#, no-wrap
msgid "As mixins"
msgstr "ミックスインとして"

#. type: Plain text
#: ../docs/src/traits/mixins.md:5
msgid ""
"Traits can be defined outside of factories and used as mixins to compose "
"shared attributes:"
msgstr ""
"トレイトはファクトリの外側で定義し、共有する属性を組み合わせるためにミックス"
"インとして使えます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/mixins.md:6
#, no-wrap
msgid ""
"FactoryBot.define do\n"
"  trait :timestamps do\n"
"    created_at { 8.days.ago }\n"
"    updated_at { 4.days.ago }\n"
"  end\n"
"  \n"
"  factory :user, traits: [:timestamps] do\n"
"    username { \"john_doe\" }\n"
"  end\n"
"  \n"
"  factory :post do\n"
"    timestamps\n"
"    title { \"Traits rock\" }\n"
"  end\n"
"end\n"
msgstr ""
"FactoryBot.define do\n"
"  trait :timestamps do\n"
"    created_at { 8.days.ago }\n"
"    updated_at { 4.days.ago }\n"
"  end\n"
"  \n"
"  factory :user, traits: [:timestamps] do\n"
"    username { \"john_doe\" }\n"
"  end\n"
"  \n"
"  factory :post do\n"
"    timestamps\n"
"    title { \"Traits rock\" }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/traits/summary.md:1
#, no-wrap
msgid "Traits"
msgstr "トレイト"

#. type: Plain text
#: ../docs/src/traits/summary.md:5
msgid ""
"Traits allow you to group attributes together and then apply them to any "
"factory."
msgstr "トレイトでは属性をグループに纏めて任意のファクトリに適用できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/summary.md:6
#, no-wrap
msgid ""
"factory :user, aliases: [:author]\n"
"\n"
"factory :story do\n"
"  title { \"My awesome story\" }\n"
"  author\n"
"\n"
"  trait :published do\n"
"    published { true }\n"
"  end\n"
"\n"
"  trait :unpublished do\n"
"    published { false }\n"
"  end\n"
"\n"
"  trait :week_long_publishing do\n"
"    start_at { 1.week.ago }\n"
"    end_at { Time.now }\n"
"  end\n"
"\n"
"  trait :month_long_publishing do\n"
"    start_at { 1.month.ago }\n"
"    end_at { Time.now }\n"
"  end\n"
"\n"
"  factory :week_long_published_story,    traits: [:published, :week_long_publishing]\n"
"  factory :month_long_published_story,   traits: [:published, :month_long_publishing]\n"
"  factory :week_long_unpublished_story,  traits: [:unpublished, :week_long_publishing]\n"
"  factory :month_long_unpublished_story, traits: [:unpublished, :month_long_publishing]\n"
"end\n"
msgstr ""
"factory :user, aliases: [:author]\n"
"\n"
"factory :story do\n"
"  title { \"My awesome story\" }\n"
"  author\n"
"\n"
"  trait :published do\n"
"    published { true }\n"
"  end\n"
"\n"
"  trait :unpublished do\n"
"    published { false }\n"
"  end\n"
"\n"
"  trait :week_long_publishing do\n"
"    start_at { 1.week.ago }\n"
"    end_at { Time.now }\n"
"  end\n"
"\n"
"  trait :month_long_publishing do\n"
"    start_at { 1.month.ago }\n"
"    end_at { Time.now }\n"
"  end\n"
"\n"
"  factory :week_long_published_story,    traits: [:published, :week_long_publishing]\n"
"  factory :month_long_published_story,   traits: [:published, :month_long_publishing]\n"
"  factory :week_long_unpublished_story,  traits: [:unpublished, :week_long_publishing]\n"
"  factory :month_long_unpublished_story, traits: [:unpublished, :month_long_publishing]\n"
"end\n"

#. type: Title #
#: ../docs/src/traits/traits-within-traits.md:1
#, no-wrap
msgid "Traits within traits"
msgstr "トレイト内トレイト"

#. type: Plain text
#: ../docs/src/traits/traits-within-traits.md:4
msgid "Traits can be used within other traits to mix in their attributes."
msgstr "トレイトは他のトレイト内で使い、属性を混ぜることができます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/traits-within-traits.md:5
#, no-wrap
msgid ""
"factory :order do\n"
"  trait :completed do\n"
"    completed_at { 3.days.ago }\n"
"  end\n"
"\n"
"  trait :refunded do\n"
"    completed\n"
"    refunded_at { 1.day.ago }\n"
"  end\n"
"end\n"
msgstr ""
"factory :order do\n"
"  trait :completed do\n"
"    completed_at { 3.days.ago }\n"
"  end\n"
"\n"
"  trait :refunded do\n"
"    completed\n"
"    refunded_at { 1.day.ago }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/traits/using.md:1
#, no-wrap
msgid "Using traits"
msgstr "トレイトを使う"

#. type: Plain text
#: ../docs/src/traits/using.md:5
msgid ""
"Traits can also be passed in as a list of Symbols when you construct an "
"instance from factory\\_bot."
msgstr ""
"factory\\_botでインスタンスを構築するとき、トレイトにはSymbolのリストも渡せま"
"す。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/using.md:6
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"  end\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"# creates an admin user with :active status and name \"Jon Snow\"\n"
"create(:user, :admin, :active, name: \"Jon Snow\")\n"
msgstr ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"  end\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"# :active状態で名前が「Jon Snow」の管理者の利用者を作ります。\n"
"create(:user, :admin, :active, name: \"Jon Snow\")\n"

#. type: Plain text
#: ../docs/src/traits/using.md:25
msgid ""
"This ability works with `build`, `build_stubbed`, `attributes_for`, and "
"`create`."
msgstr ""
"この機能は`build`、`build_stubbed`、`attributes_for`、`create`で動きます。"

#. type: Plain text
#: ../docs/src/traits/using.md:29
msgid ""
"`create_list` and `build_list` methods are supported as well. Remember to "
"pass the number of instances to create/build as second parameter, as "
"documented in the \"Building or Creating Multiple Records\" section of this "
"file."
msgstr ""
"`create_list`メソッドと`build_list`メソッドも対応しています。\n"
"2つ目の仮引数に作成・構築するインスタンス数を渡すことをご留意ください。\n"
"このファイルの「複数レコードの構築と作成」でドキュメントに書かれている通りで"
"す。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/using.md:30
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"  end\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"# creates 3 admin users with :active status and name \"Jon Snow\"\n"
"create_list(:user, 3, :admin, :active, name: \"Jon Snow\")\n"
msgstr ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :active do\n"
"    name { \"John Doe\" }\n"
"    status { :active }\n"
"  end\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"# 3人の管理利用者を作ります。:active状態があり、名前は「Jon Snow」です\n"
"create_list(:user, 3, :admin, :active, name: \"Jon Snow\")\n"

#. type: Title #
#: ../docs/src/traits/with-associations.md:1
#: ../docs/src/transient-attributes/with-associations.md:1
#, no-wrap
msgid "With associations"
msgstr "関連付き"

#. type: Plain text
#: ../docs/src/traits/with-associations.md:4
msgid "Traits can be used with associations easily too:"
msgstr "トレイトは関連とも簡単に使えます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/with-associations.md:5
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"factory :post do\n"
"  association :user, :admin, name: 'John Doe'\n"
"end\n"
"\n"
"# creates an admin user with name \"John Doe\"\n"
"create(:post).user\n"
msgstr ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"factory :post do\n"
"  association :user, :admin, name: 'John Doe'\n"
"end\n"
"\n"
"# 名前が「John Doe」の管理者の利用者を作ります。\n"
"create(:post).user\n"

#. type: Plain text
#: ../docs/src/traits/with-associations.md:23
msgid ""
"When you're using association names that are different than the factory:"
msgstr "ファクトリと異なる関連名を使うときは次のようにします。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/with-associations.md:24
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"factory :post do\n"
"  association :author, :admin, factory: :user, name: 'John Doe'\n"
"  # or\n"
"  association :author, factory: [:user, :admin], name: 'John Doe'\n"
"end\n"
"\n"
"# creates an admin user with name \"John Doe\"\n"
"create(:post).author\n"
msgstr ""
"factory :user do\n"
"  name { \"Friendly User\" }\n"
"\n"
"  trait :admin do\n"
"    admin { true }\n"
"  end\n"
"end\n"
"\n"
"factory :post do\n"
"  association :author, :admin, factory: :user, name: 'John Doe'\n"
"  # もしくは以下です。\n"
"  association :author, factory: [:user, :admin], name: 'John Doe'\n"
"end\n"
"\n"
"# 名前が「John Doe」の管理者の利用者を作ります。\n"
"create(:post).author\n"

#. type: Title #
#: ../docs/src/traits/with-transient-attributes.md:1
#, no-wrap
msgid "With transient attributes"
msgstr "一過的属性付き"

#. type: Plain text
#: ../docs/src/traits/with-transient-attributes.md:4
msgid "Traits can accept transient attributes."
msgstr "トレイトは一過的属性を受け付けられます。"

#. type: Fenced code block (ruby)
#: ../docs/src/traits/with-transient-attributes.md:5
#, no-wrap
msgid ""
"factory :invoice do\n"
"  trait :with_amount do\n"
"    transient do\n"
"      amount { 1 }\n"
"    end\n"
"\n"
"    after(:create) do |invoice, context|\n"
"      create :line_item, invoice: invoice, amount: context.amount\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create :invoice, :with_amount, amount: 2\n"
msgstr ""
"factory :invoice do\n"
"  trait :with_amount do\n"
"    transient do\n"
"      amount { 1 }\n"
"    end\n"
"\n"
"    after(:create) do |invoice, context|\n"
"      create :line_item, invoice: invoice, amount: context.amount\n"
"    end\n"
"  end\n"
"end\n"
"\n"
"create :invoice, :with_amount, amount: 2\n"

#. type: Title #
#: ../docs/src/transient-attributes/summary.md:1
#, no-wrap
msgid "Transient Attributes"
msgstr "一過的属性"

#. type: Plain text
#: ../docs/src/transient-attributes/summary.md:6
msgid ""
"Transient attributes are attributes only available within the factory "
"definition, and not set on the object being built. This allows for more "
"complex logic inside factories."
msgstr ""
"一過的属性とは、ファクトリ定義内でのみ使える属性で、オブジェクトが構築される"
"ときには設定されません。\n"
"これにより、もっと複雑な仕組みをファクトリ内に書けます。"

#. type: Plain text
#: ../docs/src/transient-attributes/summary.md:8
msgid "These are defined within a `transient` block:"
msgstr "これらの属性は`transient`ブロック内に定義します。"

#. type: Fenced code block (ruby)
#: ../docs/src/transient-attributes/summary.md:9
#, no-wrap
msgid ""
"factory :user do\n"
"  name { \"Zero Cool\" }\n"
"  birth_date { age&.years.ago }\n"
"\n"
"  transient do\n"
"    age { 11 } # only used to set `birth_date` above\n"
"  end\n"
"end\n"
msgstr ""
"factory :user do\n"
"  name { \"Zero Cool\" }\n"
"  birth_date { age&.years.ago }\n"
"\n"
"  transient do\n"
"    age { 11 } # 上の`birth_date`に設定するためだけに使われます。\n"
"  end\n"
"end\n"

#. type: Plain text
#: ../docs/src/transient-attributes/with-associations.md:6
msgid ""
"Transient [associations](../associations/summary.md) are not supported in "
"factory\\_bot. Associations within the transient block will be treated as "
"regular, non-transient associations."
msgstr ""
"一過的[関連](../associations/summary.md)はfactory\\_botでは対応していませ"
"ん。\n"
"一過的ブロック内の関連は通常の一過的でない関連として扱われます。"

#. type: Plain text
#: ../docs/src/transient-attributes/with-associations.md:9
msgid ""
"If needed, you can generally work around this by building a factory within a "
"transient attribute:"
msgstr "必要であれば、一般には一過的属性内でファクトリを構築して回避できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/transient-attributes/with-associations.md:10
#, no-wrap
msgid ""
"factory :post\n"
"\n"
"factory :user do\n"
"  transient do\n"
"    post { build(:post) }\n"
"  end\n"
"end\n"
msgstr ""
"factory :post\n"
"\n"
"factory :user do\n"
"  transient do\n"
"    post { build(:post) }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../docs/src/transient-attributes/with-attributes_for.md:1
#, no-wrap
msgid "With attributes_for"
msgstr "attributes_for付き"

#. type: Plain text
#: ../docs/src/transient-attributes/with-attributes_for.md:4
msgid ""
"Transient attributes will be ignored within `attributes_for` and won't be "
"set on the model, even if the attribute exists or you attempt to override it."
msgstr ""
"一過的属性は`attributes_for`内では無視され、属性が存在して上塗りしようとした"
"としても、モデルに設定されません。"

#. type: Title #
#: ../docs/src/transient-attributes/with-callbacks.md:1
#, no-wrap
msgid "With callbacks"
msgstr "コールバック付き"

#. type: Plain text
#: ../docs/src/transient-attributes/with-callbacks.md:6
msgid ""
"If you need to access the evaluated definition itself in a factory\\_bot "
"callback, you'll need to declare a second block argument (for the "
"definition) and access transient attributes from there. This represents the "
"final, evaluated value."
msgstr ""
"factory\\_botのコールバックで評価された定義自体を使う必要があるとき、（定義"
"に）2つ目のブロック引数を宣言してそこから一過的属性を使う必要があります。\n"
"こうすると、最終的な評価された値が表されます。"

#. type: Fenced code block (ruby)
#: ../docs/src/transient-attributes/with-callbacks.md:7
#, no-wrap
msgid ""
"factory :user do\n"
"  transient do\n"
"    upcased { false }\n"
"  end\n"
"\n"
"  name { \"John Doe\" }\n"
"\n"
"  after(:create) do |user, context|\n"
"    user.name.upcase! if context.upcased\n"
"  end\n"
"end\n"
"\n"
"create(:user).name\n"
"#=> \"John Doe\"\n"
"\n"
"create(:user, upcased: true).name\n"
"#=> \"JOHN DOE\"\n"
msgstr ""
"factory :user do\n"
"  transient do\n"
"    upcased { false }\n"
"  end\n"
"\n"
"  name { \"John Doe\" }\n"
"\n"
"  after(:create) do |user, context|\n"
"    user.name.upcase! if context.upcased\n"
"  end\n"
"end\n"
"\n"
"create(:user).name\n"
"#=> \"John Doe\"\n"
"\n"
"create(:user, upcased: true).name\n"
"#=> \"JOHN DOE\"\n"

#. type: Title #
#: ../docs/src/transient-attributes/with-other-attributes.md:1
#, no-wrap
msgid "With other attributes"
msgstr "他の属性付き"

#. type: Plain text
#: ../docs/src/transient-attributes/with-other-attributes.md:5
msgid ""
"You can access transient attributes within other attributes (see [Dependent "
"Attributes](../dependent-attributes/summary.md)):"
msgstr ""
"他の属性から一過的属性を使えます（[依存属性](../dependent-attributes/summary."
"md)を参照）。"

#. type: Fenced code block (ruby)
#: ../docs/src/transient-attributes/with-other-attributes.md:6
#, no-wrap
msgid ""
"factory :user do\n"
"  transient do\n"
"    rockstar { true }\n"
"  end\n"
"\n"
"  name { \"John Doe#{\" - Rockstar\" if rockstar}\" }\n"
"end\n"
"\n"
"create(:user).name\n"
"#=> \"John Doe - ROCKSTAR\"\n"
"\n"
"create(:user, rockstar: false).name\n"
"#=> \"John Doe\"\n"
msgstr ""
"factory :user do\n"
"  transient do\n"
"    rockstar { true }\n"
"  end\n"
"\n"
"  name { \"John Doe#{\" - Rockstar\" if rockstar}\" }\n"
"end\n"
"\n"
"create(:user).name\n"
"#=> \"John Doe - ROCKSTAR\"\n"
"\n"
"create(:user, rockstar: false).name\n"
"#=> \"John Doe\"\n"

#. type: Title #
#: ../docs/src/using-factories/attribute-overrides.md:1
#, no-wrap
msgid "Attribute overrides"
msgstr "属性の上塗り"

#. type: Plain text
#: ../docs/src/using-factories/attribute-overrides.md:5
msgid ""
"No matter which strategy is used, it's possible to override the defined "
"attributes by passing a hash:"
msgstr "使われた戦略に依らず、ハッシュを渡して定義された属性を上塗りできます。"

#. type: Fenced code block (ruby)
#: ../docs/src/using-factories/attribute-overrides.md:6
#, no-wrap
msgid ""
"# Build a User instance and override the first_name property\n"
"user = build(:user, first_name: \"Joe\")\n"
"user.first_name\n"
"# => \"Joe\"\n"
msgstr ""
"# Userインスタンスを構築しfirst_name特性を上塗りします\n"
"user = build(:user, first_name: \"Joe\")\n"
"user.first_name\n"
"# => \"Joe\"\n"

#. type: Plain text
#: ../docs/src/using-factories/attribute-overrides.md:16
msgid ""
"Ruby 3.1's support for [omitting values][] from `Hash` literals dovetails "
"with attribute overrides and provides an opportunity to limit the repetition "
"of variable names:"
msgstr ""
"Ruby 3.1の`Hash`表記での[バリューの省略][omitting values]対応は属性の上塗りに"
"ぴったり馴染む機能で、変数名の繰り返しになるところを削減できます。"

#. type: Fenced code block (ruby)
#: ../docs/src/using-factories/attribute-overrides.md:17
#, no-wrap
msgid ""
"first_name = \"Joe\"\n"
"\n"
"# Build a User instance and override the first_name property\n"
"user = build(:user, first_name:)\n"
"user.first_name\n"
"# => \"Joe\"\n"
msgstr ""
"first_name = \"Joe\"\n"
"\n"
"# Userインスタンスを構築しfirst_name特性を上塗りします\n"
"user = build(:user, first_name:)\n"
"user.first_name\n"
"# => \"Joe\"\n"

#. type: Plain text
#: ../docs/src/using-factories/build-strategies.md:5
msgid ""
"factory\\_bot supports several different build strategies: `build`, "
"`create`, `attributes_for` and `build_stubbed`:"
msgstr ""
"factory\\_botは複数の異なる構築戦略に対応しています。\n"
"`build`、`create`、`attributes_for`、`build_stubbed`です。"

#. type: Fenced code block (ruby)
#: ../docs/src/using-factories/build-strategies.md:6
#, no-wrap
msgid ""
"# Returns a User instance that's not saved\n"
"user = build(:user)\n"
"\n"
"# Returns a saved User instance\n"
"user = create(:user)\n"
"\n"
"# Returns a hash of attributes, which can be used to build a User instance for example\n"
"attrs = attributes_for(:user)\n"
"\n"
"# Integrates with Ruby 3.0's support for pattern matching assignment\n"
"attributes_for(:user) => {email:, name:, **attrs}\n"
"\n"
"# Returns an object with all defined attributes stubbed out\n"
"stub = build_stubbed(:user)\n"
"\n"
"# Passing a block to any of the methods above will yield the return object\n"
"create(:user) do |user|\n"
"  user.posts.create(attributes_for(:post))\n"
"end\n"
msgstr ""
"# 保存されないUserインスタンスを返します。\n"
"user = build(:user)\n"
"\n"
"# 保存されたUserインスタンスを返します。\n"
"user = create(:user)\n"
"\n"
"# 属性のハッシュを返します。例えばUserインスタンスを構築するのに使えます。\n"
"attrs = attributes_for(:user)\n"
"\n"
"# Ruby 3.0のパターン合致代入の対応と統合します。\n"
"attributes_for(:user) => {email:, name:, **attrs}\n"
"\n"
"# 全ての定義された属性をスタブ化したオブジェクトを返します。\n"
"stub = build_stubbed(:user)\n"
"\n"
"# 上記のどのメソッドにも、ブロックを渡せば返却されたオブジェクトがもたらされます。\n"
"create(:user) do |user|\n"
"  user.posts.create(attributes_for(:post))\n"
"end\n"

#. type: Title #
#: ../docs/src/using-factories/build-strategies.md:28
#, no-wrap
msgid "build_stubbed and Marshal.dump"
msgstr "build_stubbedとMarshal.dump"

#. type: Plain text
#: ../docs/src/using-factories/build-strategies.md:31
msgid ""
"Note that objects created with `build_stubbed` cannot be serialized with "
"`Marshal.dump`, since factory\\_bot defines singleton methods on these "
"objects."
msgstr ""
"なお`build_stubbed`で作られたオブジェクトは`Marshal.dump`で直列化できませ"
"ん。\n"
"factory\\_botはこれらのオブジェクトに特異メソッドを定義するからです。"

#. type: Title #
#: ../docs/src/using-without-bundler/summary.md:1
#, no-wrap
msgid "Using Without Bundler"
msgstr "Bundler無しで使う"

#. type: Plain text
#: ../docs/src/using-without-bundler/summary.md:4
msgid ""
"If you're not using Bundler, be sure to have the gem installed and call:"
msgstr ""
"Bundlerを使わないとき、gemがインストールされて呼ばれていることを確認してくだ"
"さい。"

#. type: Fenced code block (ruby)
#: ../docs/src/using-without-bundler/summary.md:5
#, no-wrap
msgid "require 'factory_bot'\n"
msgstr "require 'factory_bot'\n"

#. type: Plain text
#: ../docs/src/using-without-bundler/summary.md:11
msgid ""
"Once required, assuming you have a directory structure of `spec/factories` "
"or `test/factories`, all you'll need to do is run:"
msgstr ""
"一旦requireされたら、`spec/factories`または`test/factories`のディレクトリ構造"
"があるとして、以下を走らせるだけで済みます。"

#. type: Fenced code block (ruby)
#: ../docs/src/using-without-bundler/summary.md:12
#, no-wrap
msgid "FactoryBot.find_definitions\n"
msgstr "FactoryBot.find_definitions\n"

#. type: Plain text
#: ../docs/src/using-without-bundler/summary.md:18
msgid ""
"If you're using a separate directory structure for your factories, you can "
"change the definition file paths before trying to find definitions:"
msgstr ""
"ファクトリ用の個別のディレクトリ構造を使っているとき、定義を見付けようとする"
"前に定義ファイルパスを代えられます。"

#. type: Fenced code block (ruby)
#: ../docs/src/using-without-bundler/summary.md:19
#, no-wrap
msgid ""
"FactoryBot.definition_file_paths = %w(custom_factories_directory)\n"
"FactoryBot.find_definitions\n"
msgstr ""
"FactoryBot.definition_file_paths = %w(custom_factories_directory)\n"
"FactoryBot.find_definitions\n"

#. type: Plain text
#: ../docs/src/using-without-bundler/summary.md:26
msgid ""
"If you don't have a separate directory of factories and would like to define "
"them inline, that's possible as well:"
msgstr "ファクトリの個別のディレクトリがなく、行内に定義したいときも可能です。"

#. type: Fenced code block (ruby)
#: ../docs/src/using-without-bundler/summary.md:27
#, no-wrap
msgid ""
"require 'factory_bot'\n"
"\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    name { 'John Doe' }\n"
"    date_of_birth { 21.years.ago }\n"
"  end\n"
"end\n"
msgstr ""
"require 'factory_bot'\n"
"\n"
"FactoryBot.define do\n"
"  factory :user do\n"
"    name { 'John Doe' }\n"
"    date_of_birth { 21.years.ago }\n"
"  end\n"
"end\n"

#. type: Title #
#: ../CONTRIBUTING.md:1
#, no-wrap
msgid "Contributing to Factory Bot"
msgstr "Factory Botへの貢献"

#. type: Plain text
#: ../CONTRIBUTING.md:5
msgid ""
"We love pull requests from everyone. By participating in this project, you "
"agree to abide by the thoughtbot [code of conduct]."
msgstr ""
"どなたでもプルリクエストを歓迎します。\n"
"このプロジェクトに参加することで、thoughtbotの[行動規範][code of conduct]に従"
"うことに同意したものとします。"

#. type: Link reference
#: ../CONTRIBUTING.md:6
#, no-wrap
msgid "[code of conduct]: https://thoughtbot.com/open-source-code-of-conduct"
msgstr "[code of conduct]: https://thoughtbot.com/open-source-code-of-conduct"

#. type: Plain text
#: ../CONTRIBUTING.md:9
msgid "Here are some ways *you* can contribute:"
msgstr "以下は*あなた*が貢献できる方法です。"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by using alpha, beta, and prerelease versions"
msgstr "アルファ、ベータ、プレリリースのバージョンを使う"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by reporting bugs"
msgstr "不具合を報告する"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by suggesting new features"
msgstr "新機能を提案する"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by writing or editing documentation"
msgstr "ドキュメントを書いたり編集したりする"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by writing specifications"
msgstr "仕様を書く"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid ""
"by writing code ( **no patch is too small** : fix typos, add comments, etc. )"
msgstr ""
"コードを書く（**どんなパッチも些細ではありません**。誤植修正やコメントの追加"
"などもそうです）"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by refactoring code"
msgstr "コードを改修する"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by closing [issues][]"
msgstr "[イシュー][issues]を閉じる"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:19
msgid "by reviewing patches"
msgstr "パッチをレビューする"

#. type: Link reference
#: ../CONTRIBUTING.md:20
#, no-wrap
msgid "[issues]: https://github.com/thoughtbot/factory_bot/issues"
msgstr "[issues]: https://github.com/thoughtbot/factory_bot/issues"

#. type: Title ##
#: ../CONTRIBUTING.md:22
#, no-wrap
msgid "Submitting an Issue"
msgstr "イシューを送る"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:30
msgid "We use the [GitHub issue tracker][issues] to track bugs and features."
msgstr ""
"[GitHubのイシュートラッカー][issues]を使って不具合と機能と把握しています。"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:30
msgid ""
"Before submitting a bug report or feature request, check to make sure it "
"hasn't already been submitted."
msgstr ""
"不具合報告や機能の要望を送る前に、既に送られていないか必ずお確かめください。"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:30
msgid ""
"When submitting a bug report, please include a [reproduction script] and any "
"other details that may be necessary to reproduce the bug, including your gem "
"version, Ruby version, and operating system."
msgstr ""
"不具合報告を送るとき、[再現スクリプト][reproduction script]とその不具合を再現"
"するのに必要かもしれないその他の詳細を含めてください。\n"
"これにはgemのバージョン、Rubyのバージョン、オペレーティングシステムが含まれま"
"す。"

#. type: Title ##
#: ../CONTRIBUTING.md:31
#, no-wrap
msgid "Cleaning up issues"
msgstr "イシューを整頓する"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:38
msgid ""
"Issues that have no response from the submitter will be closed after 30 days."
msgstr "送信者から反応がないイシューは30日以降に閉じられます。"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:38
msgid ""
"Issues will be closed once they're assumed to be fixed or answered. If the "
"maintainer is wrong, it can be opened again."
msgstr ""
"イシューは修正されたり回答されたと思われたときに閉じられます。\n"
"メンテナが間違っていたときは再び開くことがあります。"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:38
msgid ""
"If your issue is closed by mistake, please understand and explain the "
"issue.  We will happily reopen the issue."
msgstr ""
"イシューが間違って閉じられたときはイシューを理解して説明してください。\n"
"喜んでイシューを再度開きます。"

#. type: Title ##
#: ../CONTRIBUTING.md:39
#, no-wrap
msgid "Submitting a Pull Request"
msgstr "プルリクエストを送る"

#. type: Bullet: '1. '
#: ../CONTRIBUTING.md:46
msgid "[Fork][fork] the [official repository][repo]."
msgstr "[公式リポジトリ][repo]を[フォーク][fork]します。"

#. type: Bullet: '1. '
#: ../CONTRIBUTING.md:46
msgid "[Create a topic branch.][branch]"
msgstr "[トピックブランチを作ります][branch]。"

#. type: Bullet: '1. '
#: ../CONTRIBUTING.md:46
msgid "Implement your feature or bug fix."
msgstr "機能や不具合修正を実装します。"

#. type: Bullet: '1. '
#: ../CONTRIBUTING.md:46
msgid "Add, commit, and push your changes."
msgstr "変更を加え、コミットし、プッシュします。"

#. type: Bullet: '1. '
#: ../CONTRIBUTING.md:46
msgid "[Submit a pull request.][pr]"
msgstr "[プルリクエストを送る][pr]。"

#. type: Title ###
#: ../CONTRIBUTING.md:47
#, no-wrap
msgid "Notes"
msgstr "補足"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:53
msgid ""
"Please add tests if you changed code. Contributions without tests won't be "
"accepted."
msgstr ""
"コードを変えたときはテストを加えてください。\n"
"テストのない貢献は受け付けられません。"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:53
msgid ""
"If you don't know how to add tests, please put in a PR and leave a comment "
"asking for help. We love helping!"
msgstr ""
"テストの加え方が分からなければ、PRを作って手助けを求めるコメントを残してくだ"
"さい。\n"
"喜んでお手伝いします！"

#. type: Bullet: '* '
#: ../CONTRIBUTING.md:53
msgid "Please don't update the Gem version."
msgstr "gemのバージョンを更新しないでください。"

#. type: Title ##
#: ../CONTRIBUTING.md:54
#, no-wrap
msgid "Setting up"
msgstr "準備"

#. type: Fenced code block (sh)
#: ../CONTRIBUTING.md:56
#, no-wrap
msgid "bundle install\n"
msgstr "bundle install\n"

#. type: Title ##
#: ../CONTRIBUTING.md:60
#, no-wrap
msgid "Running the test suite"
msgstr "テストスートを走らせる"

#. type: Plain text
#: ../CONTRIBUTING.md:63
msgid "The default rake task will run the full test suite and [standard]:"
msgstr "既定のrakeタスクでは、完全なテストスートと[standard]が実行されます。"

#. type: Fenced code block (sh)
#: ../CONTRIBUTING.md:64
#, no-wrap
msgid "bundle exec rake\n"
msgstr "bundle exec rake\n"

#. type: Plain text
#: ../CONTRIBUTING.md:69
msgid "You can also run a single group of tests (unit, spec, or feature)"
msgstr "1グループのテスト（単体、スペック、機能）を走らせることもできます。"

#. type: Fenced code block (sh)
#: ../CONTRIBUTING.md:70
#, no-wrap
msgid ""
"bundle exec rake spec:unit\n"
"bundle exec rake spec:acceptance\n"
"bundle exec rake features\n"
msgstr ""
"bundle exec rake spec:unit\n"
"bundle exec rake spec:acceptance\n"
"bundle exec rake features\n"

#. type: Plain text
#: ../CONTRIBUTING.md:77
msgid ""
"To run an individual rspec test, you can provide a path and line number:"
msgstr "個別のrspecのテストを走らせるため、パスと行番号を与えられます。"

#. type: Fenced code block (sh)
#: ../CONTRIBUTING.md:78
#, no-wrap
msgid "bundle exec rspec spec/path/to/spec.rb:123\n"
msgstr "bundle exec rspec spec/path/to/spec.rb:123\n"

#. type: Plain text
#: ../CONTRIBUTING.md:84
msgid ""
"You can run tests with a specific version of rails via [appraisal]. To run "
"the default rake task against Rails 6, for example:"
msgstr ""
"[appraisal]で特定のバージョンのrailsでテストを走らせられます。\n"
"Rails 6に対して、既定のrakeタスクを走らせる例は以下です。"

#. type: Fenced code block (sh)
#: ../CONTRIBUTING.md:85
#, no-wrap
msgid "bundle exec appraisal 6.0 rake\n"
msgstr "bundle exec appraisal 6.0 rake\n"

#. type: Title ##
#: ../CONTRIBUTING.md:89
#, no-wrap
msgid "Formatting"
msgstr "整形"

#. type: Plain text
#: ../CONTRIBUTING.md:92
msgid "Use [standard] to automatically format your code:"
msgstr "自動でコードを整形するには[standard]を使ってください。"

#. type: Fenced code block (sh)
#: ../CONTRIBUTING.md:93
#, no-wrap
msgid "bundle exec rake standard:fix\n"
msgstr "bundle exec rake standard:fix\n"

#. type: Link reference
#: ../CONTRIBUTING.md:97
#, no-wrap
msgid "[repo]: https://github.com/thoughtbot/factory_bot/tree/main"
msgstr "[repo]: https://github.com/thoughtbot/factory_bot/tree/main"

#. type: Link reference
#: ../CONTRIBUTING.md:98
#, no-wrap
msgid "[fork]: https://help.github.com/articles/fork-a-repo/"
msgstr "[fork]: https://help.github.com/articles/fork-a-repo/"

#. type: Link reference
#: ../CONTRIBUTING.md:99
#, no-wrap
msgid "[branch]: https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/"
msgstr "[branch]: https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/"

#. type: Link reference
#: ../CONTRIBUTING.md:100
#, no-wrap
msgid "[pr]: https://help.github.com/articles/using-pull-requests/"
msgstr "[pr]: https://help.github.com/articles/using-pull-requests/"

#. type: Link reference
#: ../CONTRIBUTING.md:101
#, no-wrap
msgid "[standard]: https://github.com/testdouble/standard"
msgstr "[standard]: https://github.com/testdouble/standard"

#. type: Link reference
#: ../CONTRIBUTING.md:102
#, no-wrap
msgid "[appraisal]: https://github.com/thoughtbot/appraisal"
msgstr "[appraisal]: https://github.com/thoughtbot/appraisal"

#. type: Link reference
#: ../CONTRIBUTING.md:103
#, no-wrap
msgid "[reproduction script]: https://github.com/thoughtbot/factory_bot/blob/main/.github/REPRODUCTION_SCRIPT.rb"
msgstr "[reproduction script]: https://github.com/thoughtbot/factory_bot/blob/main/.github/REPRODUCTION_SCRIPT.rb"

#. type: Plain text
#: ../CONTRIBUTING.md:105
msgid ""
"Inspired by https://github.com/middleman/middleman-heroku/blob/master/"
"CONTRIBUTING.md"
msgstr ""
"https://github.com/middleman/middleman-heroku/blob/master/CONTRIBUTING.md か"
"ら着想を得ました。"

#. type: Title #
#: ../README.md:1
#, no-wrap
msgid "factory_bot [![Build Status][ci-image]][ci] [![Code Climate][grade-image]][grade] [![Gem Version][version-image]][version]"
msgstr "factory_bot [![ビルド状態][ci-image]][ci] [![Code Climate][grade-image]][grade] [![Gemのバージョン][version-image]][version]"

#. type: Plain text
#: ../README.md:7
msgid ""
"If you want to use factory_bot with Rails, see [factory_bot_rails](https://"
"github.com/thoughtbot/factory_bot_rails)."
msgstr ""
"Railsでfactory_botを使いたいときは[factory_bot_rails](https://github.com/"
"thoughtbot/factory_bot_rails)を参照してください。"

#. type: Plain text
#: ../README.md:9
msgid "_[Interested in the history of the project name?][NAME]_"
msgstr "_[プロジェクト名の歴史に関心がありますか][NAME]_"

#. type: Title ###
#: ../README.md:11
#, no-wrap
msgid "Transitioning from factory\\_girl?"
msgstr "factory\\_girlから移行されますか"

#. type: Plain text
#: ../README.md:14
msgid ""
"Check out the [guide](https://github.com/thoughtbot/factory_bot/blob/4-9-0-"
"stable/UPGRADE_FROM_FACTORY_GIRL.md)."
msgstr ""
"[手引き](https://github.com/thoughtbot/factory_bot/blob/4-9-0-stable/"
"UPGRADE_FROM_FACTORY_GIRL.md)をご確認ください。"

#. type: Title -
#: ../README.md:17
#, no-wrap
msgid "Documentation"
msgstr "ドキュメント"

#. type: Plain text
#: ../README.md:20
msgid ""
"See our extensive reference, guides, and cookbook in [the factory_bot book]"
"[]."
msgstr ""
"[factory_botの本][the factory_bot book]で網羅的な参照、手引き、レシピを参照し"
"てください。"

#. type: Plain text
#: ../README.md:23
msgid ""
"For information on integrations with third party libraries, such as RSpec or "
"Rails, see [the factory_bot wiki][]."
msgstr ""
"RSpecやRailsといったサードパーティライブラリの統合についての情報は"
"[factory_botのウィキ][the factory_bot wiki]を参照してください。"

#. type: Plain text
#: ../README.md:25
#, no-wrap
msgid " We also have [a detailed introductory video][], available for free on Upcase.\n"
msgstr ""
"[詳細な導入のための映像][a detailed introductory video]もあります。\n"
"Upcaseで無料で見られます。\n"

#. type: Link reference
#: ../README.md:26
#, no-wrap
msgid "[a detailed introductory video]: https://upcase.com/videos/factory-bot?utm_source=github&utm_medium=open-source&utm_campaign=factory-girl"
msgstr "[a detailed introductory video]: https://upcase.com/videos/factory-bot?utm_source=github&utm_medium=open-source&utm_campaign=factory-girl"

#. type: Link reference
#: ../README.md:27
#, no-wrap
msgid "[the factory_bot book]: https://thoughtbot.github.io/factory_bot"
msgstr "[the factory_bot book]: https://thoughtbot.github.io/factory_bot"

#. type: Link reference
#: ../README.md:28
#, no-wrap
msgid "[the factory_bot wiki]: https://github.com/thoughtbot/factory_bot/wiki"
msgstr "[the factory_bot wiki]: https://github.com/thoughtbot/factory_bot/wiki"

#. type: Plain text
#: ../README.md:31
msgid "Install"
msgstr "インストール"

#. type: Plain text
#: ../README.md:34
msgid "Run:"
msgstr "以下を走らせてください。"

#. type: Fenced code block (ruby)
#: ../README.md:35
#, no-wrap
msgid "bundle add factory_bot\n"
msgstr "bundle add factory_bot\n"

#. type: Plain text
#: ../README.md:40
msgid "To install the gem manually from your shell, run:"
msgstr "シェルで手動でgemをインストールするには、以下を走らせてください。"

#. type: Fenced code block (shell)
#: ../README.md:41
#, no-wrap
msgid "gem install factory_bot\n"
msgstr "gem install factory_bot\n"

#. type: Title -
#: ../README.md:46
#, no-wrap
msgid "Supported Ruby versions"
msgstr "対応しているRubyのバージョン"

#. type: Plain text
#: ../README.md:49
msgid ""
"Supported Ruby versions are listed in [`.github/workflows/build.yml`]"
"(https://github.com/thoughtbot/factory_bot/blob/main/.github/workflows/build."
"yml)"
msgstr ""
"対応しているRubyのバージョンは[`.github/workflows/build.yml`](https://github."
"com/thoughtbot/factory_bot/blob/main/.github/workflows/build.yml)に一覧になっ"
"ています。"

#. type: Title -
#: ../README.md:51
#, no-wrap
msgid "More Information"
msgstr "その他の情報"

#. type: Bullet: '* '
#: ../README.md:57
msgid "[Rubygems](https://rubygems.org/gems/factory_bot)"
msgstr "[Rubygems](https://rubygems.org/gems/factory_bot)"

#. type: Bullet: '* '
#: ../README.md:57
msgid ""
"[Stack Overflow](https://stackoverflow.com/questions/tagged/factory-bot)"
msgstr ""
"[Stack Overflow](https://stackoverflow.com/questions/tagged/factory-bot)"

#. type: Bullet: '* '
#: ../README.md:57
msgid "[Issues](https://github.com/thoughtbot/factory_bot/issues)"
msgstr "[イシュー](https://github.com/thoughtbot/factory_bot/issues)"

#. type: Bullet: '* '
#: ../README.md:57
msgid ""
"[GIANT ROBOTS SMASHING INTO OTHER GIANT ROBOTS](https://robots.thoughtbot."
"com/)"
msgstr ""
"[GIANT ROBOTS SMASHING INTO OTHER GIANT ROBOTS](https://robots.thoughtbot."
"com/)"

#. type: Link reference
#: ../README.md:58
#, no-wrap
msgid "[GETTING_STARTED]: https://github.com/thoughtbot/factory_bot/blob/main/GETTING_STARTED.md"
msgstr "[GETTING_STARTED]: https://github.com/thoughtbot/factory_bot/blob/main/GETTING_STARTED.md"

#. type: Link reference
#: ../README.md:59
#, no-wrap
msgid "[NAME]: https://github.com/thoughtbot/factory_bot/blob/main/NAME.md"
msgstr "[NAME]: https://github.com/thoughtbot/factory_bot/blob/main/NAME.md"

#. type: Title -
#: ../README.md:62
#, no-wrap
msgid "Useful Tools"
msgstr "有用なツール"

#. type: Bullet: '* '
#: ../README.md:65
msgid ""
"[FactoryTrace](https://github.com/djezzzl/factory_trace) - helps to find "
"unused factories and traits."
msgstr ""
"[FactoryTrace](https://github.com/djezzzl/factory_trace)は使われていないファ"
"クトリやトレイトを見付けるのに役立ちます。"

#. type: Title -
#: ../README.md:67
#, no-wrap
msgid "Contributing"
msgstr "貢献"

#. type: Plain text
#: ../README.md:70
msgid ""
"Please see [CONTRIBUTING.md](https://github.com/thoughtbot/factory_bot/blob/"
"main/CONTRIBUTING.md)."
msgstr ""
"[CONTRIBUTING.md](https://github.com/thoughtbot/factory_bot/blob/main/"
"CONTRIBUTING.md)を参照してください。"

#. type: Plain text
#: ../README.md:74
msgid ""
"factory_bot was originally written by Joe Ferris and is maintained by "
"thoughtbot.  Many improvements and bugfixes were contributed by the [open "
"source community](https://github.com/thoughtbot/factory_bot/graphs/"
"contributors)."
msgstr ""
"factory_botは元はJoe Ferrisにより書かれ、thoughtbotにより保守されています。\n"
"多くの向上と不具合の修正が[オープンソースコミュニティ](https://github.com/"
"thoughtbot/factory_bot/graphs/contributors)により貢献されました。"

#. type: Plain text
#: ../README.md:85
#, no-wrap
msgid "<!-- START /templates/footer.md -->\n"
msgstr "<!-- START /templates/footer.md -->\n"

#. type: Plain text
#: ../README.md:88
msgid "![thoughtbot](https://thoughtbot.com/thoughtbot-logo-for-readmes.svg)"
msgstr "![thoughtbot](https://thoughtbot.com/thoughtbot-logo-for-readmes.svg)"

#. type: Plain text
#: ../README.md:91
msgid ""
"This repo is maintained and funded by thoughtbot, inc.  The names and logos "
"for thoughtbot are trademarks of thoughtbot, inc."
msgstr ""
"このリポジトリはthoughtbot, inc.により保守され、資金提供されています。\n"
"thoughtbotの名前とロゴはthoughtbot, inc.の商標です。"

#. type: Plain text
#: ../README.md:95
msgid ""
"We love open source software! See [our other projects][community].  We are "
"[available for hire][hire]."
msgstr ""
"私達はオープンソースソフトウェアが大好きです！\n"
"[私達の他のプロジェクト][community]を参照してください。\n"
"[求人を募集しています][hire]。"

#. type: Plain text
#: ../README.md:101
#, no-wrap
msgid "<!-- END /templates/footer.md -->\n"
msgstr "<!-- END /templates/footer.md -->\n"

#. type: Link reference
#: ../README.md:102
#, no-wrap
msgid "[ci-image]: https://github.com/thoughtbot/factory_bot/actions/workflows/build.yml/badge.svg?branch=main"
msgstr "[ci-image]: https://github.com/thoughtbot/factory_bot/actions/workflows/build.yml/badge.svg?branch=main"

#. type: Link reference
#: ../README.md:103
#, no-wrap
msgid "[ci]: https://github.com/thoughtbot/factory_bot/actions?query=workflow%3ABuild+branch%3Amain"
msgstr "[ci]: https://github.com/thoughtbot/factory_bot/actions?query=workflow%3ABuild+branch%3Amain"

#. type: Link reference
#: ../README.md:104
#, no-wrap
msgid "[grade-image]: https://codeclimate.com/github/thoughtbot/factory_bot/badges/gpa.svg"
msgstr "[grade-image]: https://codeclimate.com/github/thoughtbot/factory_bot/badges/gpa.svg"

#. type: Link reference
#: ../README.md:105
#, no-wrap
msgid "[grade]: https://codeclimate.com/github/thoughtbot/factory_bot"
msgstr "[grade]: https://codeclimate.com/github/thoughtbot/factory_bot"

#. type: Link reference
#: ../README.md:106
#, no-wrap
msgid "[version-image]: https://badge.fury.io/rb/factory_bot.svg"
msgstr "[version-image]: https://badge.fury.io/rb/factory_bot.svg"

#. type: Link reference
#: ../README.md:107
#, no-wrap
msgid "[version]: https://badge.fury.io/rb/factory_bot"
msgstr "[version]: https://badge.fury.io/rb/factory_bot"

#. type: Link reference
#: ../README.md:108
#, no-wrap
msgid "[hound-badge-image]: https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg"
msgstr "[hound-badge-image]: https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg"

#. type: Link reference
#: ../README.md:109
#, no-wrap
msgid "[hound]: https://houndci.com"
msgstr "[hound]: https://houndci.com"
